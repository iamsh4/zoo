mov Rm,Rn	Rm -> Rn	0110nnnnmmmm0011		
mov #imm,Rn	imm -> sign extension -> Rn	1110nnnniiiiiiii		
mova @(disp,PC),R0	(disp*4) + (PC & 0xFFFFFFFC) + 4 -> R0	11000111dddddddd		
mov.w @(disp,PC),Rn	(disp*2 + PC + 4) -> sign extension -> Rn	1001nnnndddddddd		
mov.l @(disp,PC),Rn	(disp*4 + (PC & 0xFFFFFFFC) + 4) -> sign extension -> Rn	1101nnnndddddddd		
mov.b @Rm,Rn	(Rm) -> sign extension -> Rn	0110nnnnmmmm0000		
mov.w @Rm,Rn	(Rm) -> sign extension -> Rn	0110nnnnmmmm0001		
mov.l @Rm,Rn	(Rm) -> Rn	0110nnnnmmmm0010		
mov.b Rm,@Rn	Rm -> (Rn)	0010nnnnmmmm0000		
mov.w Rm,@Rn	Rm -> (Rn)	0010nnnnmmmm0001		
mov.l Rm,@Rn	Rm -> (Rn)	0010nnnnmmmm0010		
mov.b @Rm+,Rn	(Rm) -> sign extension -> Rn, Rm+1 -> Rm	0110nnnnmmmm0100		
mov.w @Rm+,Rn	(Rm) -> sign extension -> Rn, Rm+2 -> Rm	0110nnnnmmmm0101		
mov.l @Rm+,Rn	(Rm) -> Rn, Rm+4 -> Rm	0110nnnnmmmm0110		
mov.b Rm,@-Rn	Rn-1 -> Rn, Rm -> (Rn)	0010nnnnmmmm0100		
mov.w Rm,@-Rn	Rn-2 -> Rn, Rm -> (Rn)	0010nnnnmmmm0101		
mov.l Rm,@-Rn	Rn-4 -> Rn, Rm -> (Rn)	0010nnnnmmmm0110		
mov.b @(disp,Rm),R0	(disp + Rm) -> sign extension -> R0	10000100mmmmdddd		
mov.w @(disp,Rm),R0	(disp*2 + Rm) -> sign extension -> R0	10000101mmmmdddd		
mov.l @(disp,Rm),Rn	(disp*4 + Rm) -> Rn	0101nnnnmmmmdddd		
mov.b R0,@(disp,Rn)	R0 -> (disp + Rn)	10000000nnnndddd		
mov.w R0,@(disp,Rn)	R0 -> (disp*2 + Rn)	10000001nnnndddd		
mov.l Rm,@(disp,Rn)	Rm -> (disp*4 + Rn)	0001nnnnmmmmdddd		
mov.b @(R0,Rm),Rn	(R0 + Rm) -> sign extension -> Rn	0000nnnnmmmm1100		
mov.w @(R0,Rm),Rn	(R0 + Rm) -> sign extension -> Rn	0000nnnnmmmm1101		
mov.l @(R0,Rm),Rn	(R0 + Rm) -> Rn	0000nnnnmmmm1110		
mov.b Rm,@(R0,Rn)	Rm -> (R0 + Rn)	0000nnnnmmmm0100		
mov.w Rm,@(R0,Rn)	Rm -> (R0 + Rn)	0000nnnnmmmm0101		
mov.l Rm,@(R0,Rn)	Rm -> (R0 + Rn)	0000nnnnmmmm0110		
mov.b @(disp,GBR),R0	(disp + GBR) -> sign extension -> R0	11000100dddddddd		
mov.w @(disp,GBR),R0	(disp*2 + GBR) -> sign extension -> R0	11000101dddddddd		
mov.l @(disp,GBR),R0	(disp*4 + GBR) -> R0	11000110dddddddd		
mov.b R0,@(disp,GBR)	R0 -> (disp + GBR)	11000000dddddddd		
mov.w R0,@(disp,GBR)	R0 -> (disp*2 + GBR)	11000001dddddddd		
mov.l R0,@(disp,GBR)	R0 -> (disp*4 + GBR)	11000010dddddddd		
movco.l R0,@Rn	LDST -> T If (T == 1): R0 -> Rn 0 -> LDST	0000nnnn01110011	LDST	
movli.l @Rm,R0	1 -> LDST (Rm) -> R0 When interrupt/exception occured: 0 -> LDST	0000mmmm01100011		
movua.l @Rm,R0	(Rm) -> R0 Load non-boundary alignment data	0100mmmm10101001		
movua.l @Rm+,R0	(Rm) -> R0, Rm + 4 -> Rm Load non-boundary alignment data	0100mmmm11101001		
movt Rn	T -> Rn	0000nnnn00101001		
swap.b Rm,Rn	Rm -> swap lower 2 bytes -> Rn	0110nnnnmmmm1000		
swap.w Rm,Rn	Rm -> swap upper/lower words -> Rn	0110nnnnmmmm1001		
xtrct Rm,Rn	Rm:Rn middle 32 bits -> Rn	0010nnnnmmmm1101		
add Rm,Rn	Rn + Rm -> Rn	0011nnnnmmmm1100		
add #imm,Rn	Rn + (sign extension)imm	0111nnnniiiiiiii		
addc Rm,Rn	Rn + Rm + T -> Rn, carry -> T	0011nnnnmmmm1110	Carry	
addv Rm,Rn	Rn + Rm -> Rn, overflow -> T	0011nnnnmmmm1111	Overflow	
cmp/eq #imm,R0	If R0 = (sign extension)imm: 1 -> T Else: 0 -> T	10001000iiiiiiii	Result	
cmp/eq Rm,Rn	If Rn = Rm: 1 -> T Else: 0 -> T	0011nnnnmmmm0000	Result	
cmp/hs Rm,Rn	If Rn >= Rm (unsigned): 1 -> T Else: 0 -> T	0011nnnnmmmm0010	Result	
cmp/ge Rm,Rn	If Rn >= Rm (signed): 1 -> T Else: 0 -> T	0011nnnnmmmm0011	Result	
cmp/hi Rm,Rn	If Rn > Rm (unsigned): 1 -> T Else: 0 -> T	0011nnnnmmmm0110	Result	
cmp/gt Rm,Rn	If Rn > Rm (signed): 1 -> T Else: 0 -> T	0011nnnnmmmm0111	Result	
cmp/pl Rn	If Rn > 0 (signed): 1 -> T Else: 0 -> T	0100nnnn00010101	Result	
cmp/pz Rn	If Rn >= 0 (signed): 1 -> T Else: 0 -> T	0100nnnn00010001	Result	
cmp/str Rm,Rn	If Rn and Rm have an equal byte: 1 -> T Else: 0 -> T	0010nnnnmmmm1100	Result	
div0s Rm,Rn	MSB of Rn -> Q, MSB of Rm -> M, M ^ Q -> T	0010nnnnmmmm0111	Result	
div0u	0 -> M, 0 -> Q, 0 -> T	0000000000011001	0	
div1 Rm,Rn	1-step division (Rn / Rm)	0011nnnnmmmm0100	Result	
dmuls.l Rm,Rn	Signed, Rn * Rm -> MACH:MACL 32 * 32 -> 64 bits	0011nnnnmmmm1101		
dmulu.l Rm,Rn	Unsigned, Rn * Rm -> MACH:MACL 32 * 32 -> 64 bits	0011nnnnmmmm0101		
dt Rn	Rn-1 -> Rn If Rn = 0: 1 -> T Else: 0 -> T	0100nnnn00010000		
exts.b Rm,Rn	Rm sign-extended from byte -> Rn	0110nnnnmmmm1110		
exts.w Rm,Rn	Rm sign-extended from word -> Rn	0110nnnnmmmm1111		
extu.b Rm,Rn	Rm zero-extended from byte -> Rn	0110nnnnmmmm1100		
extu.w Rm,Rn	Rm zero-extended from word -> Rn	0110nnnnmmmm1101		
mac.l @Rm+,@Rn+	Signed, (Rn) * (Rm) + MAC -> MAC 32 * 32 + 64 -> 64 bits	0000nnnnmmmm1111		
mac.w @Rm+,@Rn+	Signed, (Rn) * (Rm) + MAC -> MAC SH1: 16 * 16 + 42 -> 42 bits Other: 16 * 16 + 64 -> 64 bits	0100nnnnmmmm1111		
mul.l Rm,Rn	Rn * Rm -> MACL 32 * 32 -> 32 bits	0000nnnnmmmm0111		
muls.w Rm,Rn	Signed, Rn * Rm -> MACL 16 * 16 -> 32 bits	0010nnnnmmmm1111		
mulu.w Rm,Rn	Unsigned, Rn * Rm -> MACL 16 * 16 -> 32 bits	0010nnnnmmmm1110		
neg Rm,Rn	0 - Rm -> Rn	0110nnnnmmmm1011		
negc Rm,Rn	0 - Rm - T -> Rn, borrow -> T	0110nnnnmmmm1010	Borrow	
sub Rm,Rn	Rn - Rm -> Rn	0011nnnnmmmm1000		
subc Rm,Rn	Rn - Rm - T -> Rn, borrow -> T	0011nnnnmmmm1010	Borrow	
subv Rm,Rn	Rn - Rm -> Rn, underflow -> T	0011nnnnmmmm1011	Underflow	
and Rm,Rn	Rn & Rm -> Rn	0010nnnnmmmm1001		
and #imm,R0	R0 & (zero extend)imm -> R0	11001001iiiiiiii		
and.b #imm,@(R0,GBR)	(R0 + GBR) & (zero extend)imm -> (R0 + GBR)	11001101iiiiiiii		
not Rm,Rn	~Rm -> Rn	0110nnnnmmmm0111		
or Rm,Rn	Rn | Rm -> Rn	0010nnnnmmmm1011		
or #imm,R0	R0 | (zero extend)imm -> R0	11001011iiiiiiii		
or.b #imm,@(R0,GBR)	(R0 + GBR) | (zero extend)imm -> (R0 + GBR)	11001111iiiiiiii		
tas.b @Rn	If (Rn) = 0: 1 -> T Else: 0 -> T 1 -> MSB of (Rn)	0100nnnn00011011	Result	
tst Rm,Rn	If Rn & Rm = 0: 1 -> T Else: 0 -> T	0010nnnnmmmm1000	Result	
tst #imm,R0	If R0 & (zero extend)imm = 0: 1 -> T Else: 0 -> T	11001000iiiiiiii	Result	
tst.b #imm,@(R0,GBR)	If (R0 + GBR) & (zero extend)imm = 0: 1 -> T Else 0: -> T	11001100iiiiiiii	Result	
xor Rm,Rn	Rn ^ Rm -> Rn	0010nnnnmmmm1010		
xor #imm,R0	R0 ^ (zero extend)imm -> R0	11001010iiiiiiii		
xor.b #imm,@(R0,GBR)	(R0 + GBR) ^ (zero extend)imm -> (R0 + GBR)	11001110iiiiiiii		
rotcl Rn rotcr Rn rotl Rn rotr Rn shad Rm,Rn shal Rn shar Rn shld Rm,Rn shll Rn shll2 Rn shll8 Rn shll16 Rn shlr Rn shlr2 Rn shlr8 Rn shlr16 Rn bf label bf/s label bt label bt/s label bra label braf Rm bsr label bsrf Rm jmp @Rm jsr @Rm jsr/n @Rm jsr/n @@(disp8,TBR) rts rts/n rtv/n Rm clrmac clrs clrt icbi @Rn ldbank @Rm,R0 ldc Rm,SR ldc.l @Rm+,SR ldc Rm,TBR ldc Rm,GBR ldc.l @Rm+,GBR ldc Rm,VBR ldc.l @Rm+,VBR ldc Rm,MOD ldc.l @Rm+,MOD ldc Rm,RE ldc.l @Rm+,RE ldc Rm,RS ldc.l @Rm+,RS ldc Rm,SGR ldc.l @Rm+,SGR ldc Rm,SSR ldc.l @Rm+,SSR ldc Rm,SPC ldc.l @Rm+,SPC ldc Rm,DBR ldc.l @Rm+,DBR ldc Rm,Rn_BANK ldc.l @Rm+,Rn_BANK ldre @(disp,PC) ldrs @(disp,PC) lds Rm,MACH lds.l @Rm+,MACH lds Rm,MACL lds.l @Rm+,MACL lds Rm,PR lds.l @Rm+,PR lds Rm,DSR lds.l @Rm+,DSR lds Rm,A0 lds.l @Rm+,A0 lds Rm,X0 lds.l @Rm+,X0 lds Rm,X1 lds.l @Rm+,X1 lds Rm,Y0 lds.l @Rm+,Y0 lds Rm,Y1 lds.l @Rm+,Y1 ldtbl movca.l R0,@Rn nop ocbi @Rn ocbp @Rn ocbwb @Rn pref @Rn prefi @Rn resbank rte setrc Rn setrc #imm sets sett sleep stbank R0,@Rn stc SR,Rn stc.l SR,@-Rn stc TBR,Rn stc GBR,Rn stc.l GBR,@-Rn stc VBR,Rn stc.l VBR,@-Rn stc MOD,Rn stc.l MOD,@-Rn stc RE,Rn stc.l RE,@-Rn stc RS,Rn stc.l RS,@-Rn stc SGR,Rn stc.l SGR,@-Rn stc SSR,Rn stc.l SSR,@-Rn stc SPC,Rn stc.l SPC,@-Rn stc DBR,Rn stc.l DBR,@-Rn stc Rm_BANK,Rn stc.l Rm_BANK,@-Rn sts MACH,Rn sts.l MACH,@-Rn sts MACL,Rn sts.l MACL,@-Rn sts PR,Rn sts.l PR,@-Rn sts DSR,Rn sts.l DSR,@-Rn sts A0,Rn sts.l A0,@-Rn sts X0,Rn sts.l X0,@-Rn sts X1,Rn sts.l X1,@-Rn sts Y0,Rn sts.l Y0,@-Rn sts Y1,Rn sts.l Y1,@-Rn synco trapa #imm fmov FRm,FRn fmov.s @Rm,FRn fmov.s FRm,@Rn fmov.s @Rm+,FRn fmov.s FRm,@-Rn fmov.s @(R0,Rm),FRn fmov.s FRm,@(R0,Rn) fmov.s @(disp12,Rm),FRn fmov.s FRm,@(disp12,Rn) fmov DRm,DRn fmov DRm,XDn fmov XDm,DRn fmov XDm,XDn fmov.d @Rm,DRn fmov.d @Rm,XDn fmov.d DRm,@Rn fmov.d XDm,@Rn fmov.d @Rm+,DRn fmov.d @Rm+,XDn fmov.d DRm,@-Rn fmov.d XDm,@-Rn fmov.d @(R0,Rm),DRn fmov.d @(R0,Rm),XDn fmov.d DRm,@(R0,Rn) fmov.d XDm,@(R0,Rn) fmov.d @(disp12,Rm),DRn fmov.d DRm,@(disp12,Rn) fldi0 FRn fldi1 FRn flds FRm,FPUL fsts FPUL,FRn fabs FRn fneg FRn fadd FRm,FRn fsub FRm,FRn fmul FRm,FRn fmac FR0,FRm,FRn fdiv FRm,FRn fsqrt FRn fcmp/eq FRm,FRn fcmp/gt FRm,FRn float FPUL,FRn ftrc FRm,FPUL fipr FVm,FVn ftrv XMTRX,FVn fsrra FRn fsca FPUL,DRn fabs DRn fneg DRn fadd DRm,DRn fsub DRm,DRn fmul DRm,DRn fdiv DRm,DRn fsqrt DRn fcmp/eq DRm,DRn fcmp/gt DRm,DRn float FPUL,DRn ftrc DRm,FPUL fcnvds DRm,FPUL fcnvsd FPUL,DRn lds Rm,FPSCR sts FPSCR,Rn lds.l @Rm+,FPSCR sts.l FPSCR,@-Rn lds Rm,FPUL sts FPUL,Rn lds.l @Rm+,FPUL sts.l FPUL,@-Rn frchg fschg fpchg nopx movx.w @Ax,Dx movx.w @Ax+,Dx movx.w @Ax+Ix,Dx movx.w Da,@Ax movx.w Da,@Ax+ movx.w Da,@Ax+Ix nopy movy.w @Ay,Dy movy.w @Ay+,Dy movy.w @Ay+Iy,Dy movy.w Da,@Ay movy.w Da,@Ay+ movy.w Da,@Ay+Iy movs.w @-As,Ds movs.w @As,Ds movs.w @As+,Ds movs.w @As+Ix,Ds movs.w Ds,@-As movs.w Ds,@As movs.w Ds,@As+ movs.w Ds,@As+Is movs.l @-As,Ds movs.l @As,Ds movs.l @As+,Ds movs.l @As+Is,Ds movs.l Ds,@-As movs.l Ds,@As movs.l Ds,@As+ movs.l Ds,@As+Is pabs Sx,Dz pabs Sy,Dz padd Sx,Sy,Dz dct padd Sx,Sy,Dz dcf padd Sx,Sy,Dz padd Sx,Sy,Du pmuls Se,Sf,Dg paddc Sx,Sy,Dz pclr Dz dct pclr Dz dcf pclr Dz pcmp Sx,Sy pcopy Sx,Dz pcopy Sy,Dz dct pcopy Sx,Dz dct pcopy Sy,Dz dcf pcopy Sx,Dz dcf pcopy Sy,Dz pneg Sx,Dz pneg Sy,Dz dct pneg Sx,Dz dct pneg Sy,Dz dcf pneg Sx,Dz dcf pneg Sy,Dz psub Sx,Sy,Dz dct psub Sx,Sy,Dz dcf psub Sx,Sy,Dz psub Sx,Sy,Du pmuls Se,Sf,Dg psubc Sx,Sy,Dz pdec Sx,Dz pdec Sy,Dz dct pdec Sx,Dz dct pdec Sy,Dz dcf pdec Sx,Dz dcf pdec Sy,Dz pinc Sx,Dz pinc Sy,Dz dct pinc Sx,Dz dct pinc Sy,Dz dcf pinc Sx,Dz dcf pinc Sy,Dz pdmsb Sx,Dz pdmsb Sy,Dz dct pdmsb Sx,Dz dct pdmsb Sy,Dz dcf pdmsb Sx,Dz dcf pdmsb Sy,Dz prnd Sx,Dz prnd Sy,Dz pand Sx,Sy,Dz dct pand Sx,Sy,Dz dcf pand Sx,Sy,Dz por Sx,Sy,Dz dct por Sx,Sy,Dz dcf por Sx,Sy,Dz pxor Sx,Sy,Dz dct pxor Sx,Sy,Dz dcf pxor Sx,Sy,Dz pmuls Se,Sf,Dg psha Sx,Sy,Dz dct psha Sx,Sy,Dz dcf psha Sx,Sy,Dz psha #imm,Dz pshl Sx,Sy,Dz dct pshl Sx,Sy,Dz dcf pshl Sx,Sy,Dz pshl #imm,Dz plds Dz,MACH plds Dz,MACL dct plds Dz,MACH dct plds Dz,MACL dcf plds Dz,MACH dcf plds Dz,MACL psts MACH,Dz psts MACL,Dz dct psts MACH,Dz dct psts MACL,Dz dcf psts MACH,Dz dcf psts MACL,Dz	T 0100nnnn00100100 MSB EX EX 1 1 1 1 1 1 1 1 1 1 1 1 Description Rotates the contents of general register Rn one bit to the left through the T bit, and stores the result in Rn. The bit rotated out of the operand is transferred to the T bit. Operation void ROTCL (int n) { long temp; if ((R[n] & 0x80000000) == 0) temp = 0; else temp = 1; R[n] T >> Rn >> T T 0100nnnn00000100 MSB EX EX 1 1 1 1 1 1 1 1 1 1 1 1 Description Rotates the contents of general register Rn one bit to the left, and stores the result in Rn. The bit rotated out of the operand is transferred to the T bit. Operation void ROTL (int n) { if ((R[n] & 0x80000000) == 0) T = 0; else T = 1; R[n] LSB >> Rn >> T If Rm >= 0: Rn Rn If Rm > |Rm| -> [MSB -> Rn] T 0100nnnn00100000 MSB EX EX 1 1 1 1 1 1 1 1 1 1 1 1 Description Arithmetically shifts the contents of general register Rn one bit to the left and stores the result in Rn. The bit shifted out of the operand is transferred to the T bit. Operation void SHAL (int n) { if ((R[n] & 0x80000000) == 0) T = 0; else T = 1; R[n] MSB >> Rn >> T If Rm >= 0: Rn Rn If Rm > |Rm| -> [0 -> Rn] T 0100nnnn00000000 MSB EX EX 1 1 1 1 1 1 1 1 1 1 1 1 Description Logically shifts the contents of general register Rn one bit to the left and stores the result in Rn. The bit shifted out of the operand is transferred to the T bit. Note Effectively, the operation performed is the same as the SHAL instruction. Operation void SHLL (int n) { if ((R[n] & 0x80000000) == 0) T = 0; else T = 1; R[n] Rn Rn Rn Rn Rn Rn 0 >> Rn >> T Rn >> 2 -> [0 -> Rn] Rn >> 8 -> [0 -> Rn] Rn >> 16 -> [0 -> Rn] If T = 0: disp*2 + PC + 4 -> PC Else: nop If T = 0: disp*2 + PC + 4 -> PC Else: nop (Delayed branch) If T = 1: disp*2 + PC + 4 -> PC Else: nop If T = 1: disp*2 + PC + 4 -> PC Else: nop (Delayed branch) disp*2 + PC + 4 -> PC (Delayed branch) Rm + PC + 4 -> PC (Delayed branch) PC + 4 -> PR, disp*2 + PC + 4 -> PC (Delayed branch) PC + 4 -> PR, Rm + PC + 4 -> PC (Delayed branch) Rm -> PC (Delayed branch) PC + 4 -> PR, Rm -> PC (Delayed branch) PC + 2 -> PR, Rm -> PC PC + 2 -> PR, (disp*4 + TBR) -> PC PR -> PC Delayed branch PR -> PC Rm -> R0, PR -> PC 0 -> MACH, 0 -> MACL 0 -> S 0 -> T Invalidate instruction cache block indicated by logical address (Specified register bank entry) -> R0 Rm -> SR (Rm) -> SR, Rm+4 -> Rm Rm -> TBR Rm -> GBR (Rm) -> GBR, Rm+4 -> Rm Rm -> VBR (Rm) -> VBR, Rm+4 -> Rm Rm -> MOD (Rm) -> MOD, Rm+4 -> Rm Rm -> RE (Rm) -> RE, Rm+4 -> Rm Rm -> RS (Rm) -> RS, Rm+4 -> Rm Rm -> SGR (Rm) -> SGR, Rm+4 -> Rm Rm -> SSR (Rm) -> SSR, Rm+4 -> Rm Rm -> SPC (Rm) -> SPC, Rm+4 -> Rm Rm -> DBR (Rm) -> DBR, Rm+4 -> Rm Rm -> Rn_BANK (n = 0-7) (Rm) -> Rn_BANK, Rm+4 -> Rm disp*2 + PC -> RE disp*2 + PC -> RS Rm -> MACH (Rm) -> MACH, Rm+4 -> Rm Rm -> MACL (Rm) -> MACL, Rm+4 -> Rm Rm -> PR (Rm) -> PR, Rm+4 -> Rm Rm -> DSR (Rm) -> DSR, Rm+4 -> Rm Rm -> A0 (Rm) -> A0, Rm+4 -> Rm Rm -> X0 (Rm) -> X0, Rm+4 -> Rm Rm -> X1 (Rm) -> X1, Rm+4 -> Rm Rm -> Y0 (Rm) -> Y0, Rm+4 -> Rm Rm -> Y1 (Rm) -> Y1, Rm+4 -> Rm PTEH/PTEL -> TLB R0 -> (Rn) (without fetching cache block) No operation Invalidate operand cache block Write back and invalidate operand cache block Write back operand cache block (Rn) -> operand cache Reads 32-byte instruction block into instruction cache Bank -> R0 to R14, GBR, MACH, MACL, PR Delayed branch SH1*,SH2*: stack area -> PC/SR SH3*,SH4*: SSR/SPC -> SR/PC Rn[11:0] -> RC (SR[27:16]) imm -> RC (SR[23:16]), 0 -> SR[27:24] 1 -> T 1 -> T Sleep or standby R0 -> (specified register bank entry) SR -> Rn Rn-4 -> Rn, SR -> (Rn) TBR -> Rn GBR -> Rn Rn-4 -> Rn, GBR -> (Rn) VBR -> Rn Rn-4 -> Rn, VBR -> (Rn) MOD -> Rn Rn-4 -> Rn, MOD -> (Rn) RE -> Rn Rn-4 -> Rn, RE -> (Rn) RS -> Rn Rn-4 -> Rn, RS -> (Rn) SGR -> Rn Rn-4 -> Rn, SGR -> (Rn) SSR -> Rn Rn-4 -> Rn, SSR -> (Rn) SPC -> Rn Rn-4 -> Rn, SPC -> (Rn) DBR -> Rn Rn-4 -> Rn, DBR -> (Rn) Rm_BANK -> Rn (m = 0-7) Rn-4 -> Rn, Rm_BANK -> (Rn) (m = 0-7) MACH -> Rn Rn-4 -> Rn, MACH -> (Rn) MACL -> Rn Rn-4 -> Rn, MACL -> (Rn) PR -> Rn Rn-4 -> Rn, PR -> (Rn) DSR -> Rn Rn-4 -> Rn, DSR -> (Rn) A0 -> Rn Rn-4 -> Rn, A0 -> (Rn) X0 -> Rn Rn-4 -> Rn, X0 -> (Rn) X1 -> Rn Rn-4 -> Rn, X1 -> (Rn) Y0 -> Rn Rn-4 -> Rn, Y0 -> (Rn) Y1 -> Rn Rn-4 -> Rn, Y1 -> (Rn) Prevents the next instruction from being issued until instructions issued before this instruction has been completed. SH1*,SH2*: PC/SR -> stack area, (imm*4 + VBR) -> PC SH3*,SH4*: PC/SR -> SPC/SSR, imm*4 -> TRA, 0x160 -> EXPEVT, VBR + 0x0100 -> PC FRm -> FRn (Rm) -> FRn FRm -> (Rn) (Rm) -> FRn, Rm+4 -> Rm Rn-4 -> Rn, FRm -> (Rn) (R0 + Rm) -> FRn FRm -> (R0 + Rn) (disp*4 + Rm) -> FRn FRm -> (disp*4 + Rn) DRm -> DRn DRm -> XDn XDm -> DRn XDm -> XDn (Rm) -> DRn (Rm) -> XDn DRm -> (Rn) XDm -> (Rn) (Rm) -> DRn, Rm + 8 -> Rm (Rm) -> XDn, Rm+8 -> Rm Rn-8 -> Rn, DRm -> (Rn) Rn-8 -> Rn, (Rn) -> XDm (R0 + Rm) -> DRn (R0 + Rm) -> XDn DRm -> (R0 + Rn) XDm -> (R0 + Rn) (disp*8 + Rm) -> DRn DRm -> (disp*8 + Rn) 0x00000000 -> FRn 0x3F800000 -> FRn FRm -> FPUL FPUL -> FRn FRn & 0x7FFFFFFF -> FRn FRn ^ 0x80000000 -> FRn FRn + FRm -> FRn FRn - FRm -> FRn FRn * FRm -> FRn FR0 * FRm + FRn -> FRn FRn / FRm -> FRn sqrt (FRn) -> FRn If FRn = FRm: 1 -> T Else: 0 -> T If FRn > FRm: 1 -> T Else: 0 -> T (float)FPUL -> FRn (long)FRm -> FPUL inner_product (FVm, FVn) -> FR[n+3] transform_vector (XMTRX, FVn) -> FVn 1.0 / sqrt (FRn) -> FRn sin (FPUL) -> FRn cos (FPUL) -> FR[n+1] DRn & 0x7FFFFFFFFFFFFFFF -> DRn DRn ^ 0x8000000000000000 -> DRn DRn + DRm -> DRn DRn - DRm -> DRn DRn * DRm -> DRn DRn / DRm -> DRn sqrt (DRn) -> DRn If DRn = DRm: 1 -> T Else: 0 -> T If DRn > DRm: 1 -> T Else: 0 -> T (double)FPUL -> DRn (long)DRm -> FPUL double_to_float (DRm) -> FPUL float_to_double (FPUL) -> DRn Rm -> FPSCR FPSCR -> Rn (Rm) -> FPSCR, Rm+4 -> Rm Rn-4 -> Rn, FPSCR -> (Rn) Rm -> FPUL FPUL -> Rn (Rm) -> FPUL, Rm+4 -> Rm Rn-4 -> Rn, FPUL -> (Rn) If FPSCR.PR = 0: ~FPSCR.FR -> FPSCR.FR Else: Undefined Operation If FPSCR.PR = 0: ~FPSCR.SZ -> FPSCR.SZ Else: Undefined Operation ~FPSCR.PR -> FPSCR.PR No operation (Ax) -> MSW of Dx, 0 -> LSW of Dx (Ax) -> MSW of Dx, 0 -> LSW of Dx, Ax+2 -> Ax (Ax) -> MSW of Dx, 0 -> LSW of Dx, Ax+Ix -> Ax MSW of Da -> (Ax) MSW of Da -> (Ax), Ax+2 -> Ax MSW of Da -> (Ax), Ax+Ix -> Ax No Operation (Ay) -> MSW of Dy, 0 -> LSW of Dy (Ay) -> MSW of Dy, 0 -> LSW of Dy, Ay+2 -> Ay (Ay) -> MSW of Dy, 0 -> LSW of Dy, Ay+Iy -> Ay MSW of Da -> (Ay) MSW of Da -> (Ay), Ay+2 -> Ay MSW of Da -> (Ay), Ay+Iy -> Ay As-2 -> As, (As) -> MSW of Ds, 0 -> LSW of Ds (As) -> MSW of Ds, 0 -> LSW of Ds (As) -> MSW of Ds, 0 -> LSW of Ds, As+2 -> As (As) -> MSW of Ds, 0 -> LSW of DS, As+Ix -> As As-2 -> As, MSW of Ds -> (As) MSW of Ds -> (As) MSW of Ds -> (As), As+2 -> As MSW of DS -> (As), As+Is -> As As-4 -> As, (As) -> Ds (As) -> Ds (As) -> Ds, As+4 -> As (As) -> Ds, As+Is -> As As-4 -> As, Ds -> (As) Ds -> (As) Ds -> (As), As+4 -> As Ds -> (As), As+Is -> As If Sx >= 0: Sx -> Dz If Sx Dz If Sy >= 0: Sy -> Dz If Sy Dz Sx + Sy -> Dz If DC = 1: Sx + Sy -> Dz Else: nop If DC = 0: Sx + Sy -> Dz Else: nop Sx + Sy -> Du MSW of Se * MSW of Sf -> Dg Sx + Sy + DC -> Dz 0x00000000 -> Dz If DC = 1: 0x00000000 -> Dz Else: nop If DC = 0: 0x00000000 -> Dz Else: nop Sx - Sy Sx -> Dz Sy -> Dz If DC = 1: Sx -> Dz Else: nop If DC = 1: Sy -> Dz Else: nop If DC = 0: Sx -> Dz Else: nop If DC = 0: Sy -> Dz Else: nop 0 - Sx -> Dz 0 - Sy -> Dz If DC = 1: 0 - Sx -> Dz Else: nop If DC = 1: 0 - Sy -> Dz Else: nop If DC = 0: 0 - Sx -> Dz Else: nop If DC = 0: 0 - Sy -> Dz Else: nop Sx - Sy -> Dz If DC = 1: Sx - Sy -> Dz Else: nop If DC = 0: Sx - Sy -> Dz Else: nop Sx - Sy -> Du MSW of Se * MSW of Sf -> Dg Sx - Sy - DC -> Dz MSW of Sx - 1 -> MSW of Dz, clear LSW of Dz MSW of Sy - 1 -> MSW of Dz, clear LSW of Dz If DC = 1: MSW of Sx - 1 -> MSW of DZ, clear LSW of Dz Else: nop If DC = 1: MSW of Sy - 1 -> MSW of DZ, clear LSW of Dz Else: nop If DC = 0: MSW of Sx - 1 -> MSW of DZ, clear LSW of Dz Else: nop If DC = 0: MSW of Sy - 1 -> MSW of DZ, clear LSW of Dz Else: nop MSW of Sy + 1 -> MSW of Dz, clear LSW of Dz MSW of Sy + 1 -> MSW of Dz, clear LSW of Dz If DC = 1: MSW of Sx + 1 -> MSW of Dz, clear LSW of Dz Else: nop If DC = 1: MSW of Sy + 1 -> MSW of Dz, clear LSW of Dz Else: nop If DC = 0: MSW of Sx + 1 -> MSW of Dz, clear LSW of Dz Else: nop If DC = 0: MSW of Sy + 1 -> MSW of Dz, clear LSW of Dz Else: nop Sx data MSB position -> MSW of Dz, clear LSW of Dz Sy data MSB position -> MSW of Dz, clear LSW of Dz If DC = 1: Sx data MSB position -> MSW of Dz, clear LSW of Dz Else: nop If DC = 1: Sy data MSB position -> MSW of Dz, clear LSW of Dz Else: nop If DC = 0: Sx data MSB position -> MSW of Dz, clear LSW of Dz Else: nop If DC = 0: Sy data MSB position -> MSW of Dz, clear LSW of Dz Else: nop Sx + 0x00008000 -> Dz, clear LSW of Dz Sy + 0x00008000 -> Dz, clear LSW of Dz Sx & Sy -> Dz, clear LSW of Dz If DC = 1: Sx & Sy -> Dz, clear LSW of Dz Else: nop If DC = 0: Sx & Sy -> Dz, clear LSW of Dz Else: nop Sx | Sy -> Dz, clear LSW of Dz If DC = 1: Sx | Sy -> Dz, clear LSW of Dz Else: nop If DC = 0: Sx | Sy -> Dz, clear LSW of Dz Else: nop Sx ^ Sy -> Dz, clear LSW of Dz If DC = 1: Sx ^ Sy -> Dz, clear LSW of Dz Else: nop If DC = 0: Sx ^ Sy -> Dz, clear LSW of Dz Else: nop MSW of Se * MSW of Sf -> Dg If Sy >= 0: Sx Dz If Sy > Sy -> Dz If DC = 1 & Sy >= 0: Sx Dz If DC = 1 & Sy > Sy -> Dz If DC = 0: nop If DC = 0 & Sy >= 0: Sx Dz If DC = 0 & Sy > Sy -> Dz If DC = 1: nop If imm >= 0: Dz Dz If imm > imm -> Dz If Sy >= 0: Sx Dz, clear LSW of Dz If Sy > Sy -> Dz, clear LSW of Dz If DC = 1 & Sy >= 0: Sx Dz, clear LSW of Dz If DC = 1 & Sy > Sy -> Dz, clear LSW of Dz If DC = 0: nop If DC = 0 & Sy >= 0: Sx Dz, clear LSW of Dz If DC = 0 & Sy > Sy -> Dz, clear LSW of Dz If DC = 1: nop If imm >= 0: Dz Dz, clear LSW of Dz If imm > imm, clear LSW of Dz Dz -> MACH Dz -> MACL If DC = 1: Dz -> MACH Else: nop If DC = 1: Dz -> MACL Else: nop If DC = 0: Dz -> MACH Else: nop If DC = 0: Dz -> MACL Else: nop MACH -> Dz MACL -> Dz If DC = 1: MACH -> Dz Else: nop If DC = 1: MACL -> Dz Else: nop If DC = 0: MACH -> Dz Else: nop If DC = 0: MACL -> Dz Else: nop	0100nnnn00100100 0100nnnn00100101 0100nnnn00000100 0100nnnn00000101 0100nnnnmmmm1100 0100nnnn00100000 0100nnnn00100001 0100nnnnmmmm1101 0100nnnn00000000 0100nnnn00001000 0100nnnn00011000 0100nnnn00101000 0100nnnn00000001 0100nnnn00001001 0100nnnn00011001 0100nnnn00101001 10001011dddddddd 10001111dddddddd 10001001dddddddd 10001101dddddddd 1010dddddddddddd 0000mmmm00100011 1011dddddddddddd 0000mmmm00000011 0100mmmm00101011 0100mmmm00001011 0100mmmm01001011 10000011dddddddd 0000000000001011 0000000001101011 0000mmmm01111011 0000000000101000 0000000001001000 0000000000001000 0000nnnn11100011 0100mmmm11100101 0100mmmm00001110 0100mmmm00000111 0100mmmm01001010 0100mmmm00011110 0100mmmm00010111 0100mmmm00101110 0100mmmm00100111 0100mmmm01011110 0100mmmm01010111 0100mmmm01111110 0100mmmm01110111 0100mmmm01101110 0100mmmm01100111 0100mmmm00111010 0100mmmm00110110 0100mmmm00111110 0100mmmm00110111 0100mmmm01001110 0100mmmm01000111 0100mmmm11110110 0100mmmm11110110 0100mmmm1nnn1110 0100mmmm1nnn0111 10001110dddddddd 10001100dddddddd 0100mmmm00001010 0100mmmm00000110 0100mmmm00011010 0100mmmm00010110 0100mmmm00101010 0100mmmm00100110 0100mmmm01101010 0100mmmm01100110 0100mmmm01110110 0100mmmm01110110 0100mmmm10001010 0100nnnn10000110 0100mmmm10011010 0100nnnn10010110 0100mmmm10101010 0100nnnn10100110 0100mmmm10111010 0100nnnn10110110 0000000000111000 0000nnnn11000011 0000000000001001 0000nnnn10010011 0000nnnn10100011 0000nnnn10110011 0000nnnn10000011 0000nnnn11010011 0000000001011011 0000000000101011 0100mmmm00010100 10000010iiiiiiii 0000000000011000 0000000000011000 0000000000011011 0100nnnn11100001 0000nnnn00000010 0100nnnn00000011 0000nnnn01001010 0000nnnn00010010 0100nnnn00010011 0000nnnn00100010 0100nnnn00100011 0000nnnn01010010 0100nnnn01010011 0000nnnn01110010 0100nnnn01110011 0000nnnn01100010 0100nnnn01100011 0000nnnn00111010 0100nnnn00110010 0000nnnn00110010 0100nnnn00110011 0000nnnn01000010 0100nnnn01000011 0000nnnn11111010 0100nnnn11110010 0000nnnn1mmm0010 0100nnnn1mmm0011 0000nnnn00001010 0100nnnn00000010 0000nnnn00011010 0100nnnn00010010 0000nnnn00101010 0100nnnn00100010 0000nnnn01101010 0100nnnn01100010 0000nnnn01111010 0100nnnn01100010 0000nnnn10001010 0100nnnn10000010 0000nnnn10011010 0100nnnn10010010 0000nnnn10101010 0100nnnn10100010 0000nnnn10111010 0100nnnn10110010 0000000010101011 11000011iiiiiiii 1111nnnnmmmm1100 1111nnnnmmmm1000 1111nnnnmmmm1010 1111nnnnmmmm1001 1111nnnnmmmm1011 1111nnnnmmmm0110 1111nnnnmmmm0111 0011nnnnmmmm0001 0111dddddddddddd 0011nnnnmmmm0001 0011dddddddddddd 1111nnn0mmm01100 1111nnn1mmm01100 1111nnn0mmm11100 1111nnn1mmm11100 1111nnn0mmmm1000 1111nnn1mmmm1000 1111nnnnmmm01010 1111nnnnmmm11010 1111nnn0mmmm1001 1111nnn1mmmm1001 1111nnnnmmm01011 1111nnnnmmm11011 1111nnn0mmmm0110 1111nnn1mmmm0110 1111nnnnmmm00111 1111nnnnmmm10111 0011nnn0mmmm0001 0111dddddddddddd 0011nnnnmmm00001 0011dddddddddddd 1111nnnn10001101 1111nnnn10011101 1111mmmm00011101 1111nnnn00001101 1111nnnn01011101 1111nnnn01001101 1111nnnnmmmm0000 1111nnnnmmmm0001 1111nnnnmmmm0010 1111nnnnmmmm1110 1111nnnnmmmm0011 1111nnnn01101101 1111nnnnmmmm0100 1111nnnnmmmm0101 1111nnnn00101101 1111mmmm00111101 1111nnmm11101101 1111nn0111111101 1111nnnn01111101 1111nnn011111101 1111nnn001011101 1111nnn001001101 1111nnn0mmm00000 1111nnn0mmm00001 1111nnn0mmm00010 1111nnn0mmm00011 1111nnn001101101 1111nnn0mmm00100 1111nnn0mmm00101 1111nnn000101101 1111mmm000111101 1111mmm010111101 1111nnn010101101 0100mmmm01101010 0000nnnn01101010 0100mmmm01100110 0100nnnn01100010 0100mmmm01011010 0000nnnn01011010 0100mmmm01010110 0100nnnn01010010 1111101111111101 1111001111111101 1111011111111101 1111000*0*0*00** 111100A*D*0*01** 111100A*D*0*10** 111100A*D*0*11** 111100A*D*1*01** 111100A*D*1*10** 111100A*D*1*11** 111100*0*0*0**00 111100*A*D*0**01 111100*A*D*0**10 111100*A*D*0**11 111100*A*D*1**01 111100*A*D*1**10 111100*A*D*1**11 111101AADDDD0000 111101AADDDD0100 111101AADDDD1000 111101AADDDD1100 111101AADDDD0001 111101AADDDD0101 111101AADDDD1001 111101AADDDD1101 111101AADDDD0010 111101AADDDD0110 111101AADDDD1010 111101AADDDD1110 111101AADDDD0011 111101AADDDD0111 111101AADDDD1011 111101AADDDD1111 111110********** 10001000xx00zzzz 111110********** 1010100000yyzzzz 111110********** 10110001xxyyzzzz 111110********** 10110010xxyyzzzz 111110********** 10110011xxyyzzzz 111110********** 0111eeffxxyygguu 111110********** 10110000xxyyzzzz 111110********** 100011010000zzzz 111110********** 100011100000zzzz 111110********** 100011110000zzzz 111110********** 10000100xxyy0000 111110********** 11011001xx00zzzz 111110********** 1111100100yyzzzz 111110********** 11011010xx00zzzz 111110********** 1111101000yyzzzz 111110********** 11011011xx00zzzz 111110********** 1111101100yyzzzz 111110********** 11001001xx00zzzz 111110********** 1110100100yyzzzz 111110********** 11001010xx00zzzz 111110********** 1110101000yyzzzz 111110********** 11001011xx00zzzz 111110********** 1110101100yyzzzz 111110********** 10100001xxyyzzzz 111110********** 10100010xxyyzzzz 111110********** 10100011xxyyzzzz 111110********** 0110eeffxxyygguu 111110********** 10100000xxyyzzzz 111110********** 10001001xx00zzzz 111110********** 1010100100yyzzzz 111110********** 10001010xx00zzzz 111110********** 1010101000yyzzzz 111110********** 10001011xx00zzzz 111110********** 1010101100yyzzzz 111110********** 10011001xx00zzzz 111110********** 1011100100yyzzzz 111110********** 10011010xx00zzzz 111110********** 1011101000yyzzzz 111110********** 10011011xx00zzzz 111110********** 1011101100yyzzzz 111110********** 10011101xx00zzzz 111110********** 1011110100yyzzzz 111110********** 10011110xx00zzzz 111110********** 1011111000yyzzzz 111110********** 10011111xx00zzzz 111110********** 1011111100yyzzzz 111110********** 10011000xx00zzzz 111110********** 1011100000yyzzzz 111110********** 10010101xxyyzzzz 111110********** 10010110xxyyzzzz 111110********** 10010111xxyyzzzz 111110********** 10110101xxyyzzzz 111110********** 10110110xxyyzzzz 111110********** 10110111xxyyzzzz 111110********** 10100101xxyyzzzz 111110********** 10100110xxyyzzzz 111110********** 10100111xxyyzzzz 111110********** 0100eeff0000gg00 111110********** 10010001xxyyzzzz 111110********** 10010010xxyyzzzz 111110********** 10010011xxyyzzzz 111110********** 00000iiiiiiizzzz 111110********** 10000001xxyyzzzz 111110********** 10000010xxyyzzzz 111110********** 10000011xxyyzzzz 111110********** 00010iiiiiiizzzz 111110********** 111011010000zzzz 111110********** 111111010000zzzz 111110********** 111011100000zzzz 111110********** 111111100000zzzz 111110********** 111011110000zzzz 111110********** 111111110000zzzz 111110********** 110011010000zzzz 111110********** 110111010000zzzz 111110********** 110011100000zzzz 111110********** 110111100000zzzz 111110********** 110011110000zzzz 111110********** 110111110000zzzz	MSB LSB MSB LSB MSB LSB MSB LSB 0 LSB LSB 1 Result Result Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update	
rotcr Rn	T >> Rn >> T	0100nnnn00100101	LSB	
rotl Rn rotr Rn shad Rm,Rn shal Rn shar Rn shld Rm,Rn shll Rn shll2 Rn shll8 Rn shll16 Rn shlr Rn shlr2 Rn shlr8 Rn shlr16 Rn bf label bf/s label bt label bt/s label bra label braf Rm bsr label bsrf Rm jmp @Rm jsr @Rm jsr/n @Rm jsr/n @@(disp8,TBR) rts rts/n rtv/n Rm clrmac clrs clrt icbi @Rn ldbank @Rm,R0 ldc Rm,SR ldc.l @Rm+,SR ldc Rm,TBR ldc Rm,GBR ldc.l @Rm+,GBR ldc Rm,VBR ldc.l @Rm+,VBR ldc Rm,MOD ldc.l @Rm+,MOD ldc Rm,RE ldc.l @Rm+,RE ldc Rm,RS ldc.l @Rm+,RS ldc Rm,SGR ldc.l @Rm+,SGR ldc Rm,SSR ldc.l @Rm+,SSR ldc Rm,SPC ldc.l @Rm+,SPC ldc Rm,DBR ldc.l @Rm+,DBR ldc Rm,Rn_BANK ldc.l @Rm+,Rn_BANK ldre @(disp,PC) ldrs @(disp,PC) lds Rm,MACH lds.l @Rm+,MACH lds Rm,MACL lds.l @Rm+,MACL lds Rm,PR lds.l @Rm+,PR lds Rm,DSR lds.l @Rm+,DSR lds Rm,A0 lds.l @Rm+,A0 lds Rm,X0 lds.l @Rm+,X0 lds Rm,X1 lds.l @Rm+,X1 lds Rm,Y0 lds.l @Rm+,Y0 lds Rm,Y1 lds.l @Rm+,Y1 ldtbl movca.l R0,@Rn nop ocbi @Rn ocbp @Rn ocbwb @Rn pref @Rn prefi @Rn resbank rte setrc Rn setrc #imm sets sett sleep stbank R0,@Rn stc SR,Rn stc.l SR,@-Rn stc TBR,Rn stc GBR,Rn stc.l GBR,@-Rn stc VBR,Rn stc.l VBR,@-Rn stc MOD,Rn stc.l MOD,@-Rn stc RE,Rn stc.l RE,@-Rn stc RS,Rn stc.l RS,@-Rn stc SGR,Rn stc.l SGR,@-Rn stc SSR,Rn stc.l SSR,@-Rn stc SPC,Rn stc.l SPC,@-Rn stc DBR,Rn stc.l DBR,@-Rn stc Rm_BANK,Rn stc.l Rm_BANK,@-Rn sts MACH,Rn sts.l MACH,@-Rn sts MACL,Rn sts.l MACL,@-Rn sts PR,Rn sts.l PR,@-Rn sts DSR,Rn sts.l DSR,@-Rn sts A0,Rn sts.l A0,@-Rn sts X0,Rn sts.l X0,@-Rn sts X1,Rn sts.l X1,@-Rn sts Y0,Rn sts.l Y0,@-Rn sts Y1,Rn sts.l Y1,@-Rn synco trapa #imm fmov FRm,FRn fmov.s @Rm,FRn fmov.s FRm,@Rn fmov.s @Rm+,FRn fmov.s FRm,@-Rn fmov.s @(R0,Rm),FRn fmov.s FRm,@(R0,Rn) fmov.s @(disp12,Rm),FRn fmov.s FRm,@(disp12,Rn) fmov DRm,DRn fmov DRm,XDn fmov XDm,DRn fmov XDm,XDn fmov.d @Rm,DRn fmov.d @Rm,XDn fmov.d DRm,@Rn fmov.d XDm,@Rn fmov.d @Rm+,DRn fmov.d @Rm+,XDn fmov.d DRm,@-Rn fmov.d XDm,@-Rn fmov.d @(R0,Rm),DRn fmov.d @(R0,Rm),XDn fmov.d DRm,@(R0,Rn) fmov.d XDm,@(R0,Rn) fmov.d @(disp12,Rm),DRn fmov.d DRm,@(disp12,Rn) fldi0 FRn fldi1 FRn flds FRm,FPUL fsts FPUL,FRn fabs FRn fneg FRn fadd FRm,FRn fsub FRm,FRn fmul FRm,FRn fmac FR0,FRm,FRn fdiv FRm,FRn fsqrt FRn fcmp/eq FRm,FRn fcmp/gt FRm,FRn float FPUL,FRn ftrc FRm,FPUL fipr FVm,FVn ftrv XMTRX,FVn fsrra FRn fsca FPUL,DRn fabs DRn fneg DRn fadd DRm,DRn fsub DRm,DRn fmul DRm,DRn fdiv DRm,DRn fsqrt DRn fcmp/eq DRm,DRn fcmp/gt DRm,DRn float FPUL,DRn ftrc DRm,FPUL fcnvds DRm,FPUL fcnvsd FPUL,DRn lds Rm,FPSCR sts FPSCR,Rn lds.l @Rm+,FPSCR sts.l FPSCR,@-Rn lds Rm,FPUL sts FPUL,Rn lds.l @Rm+,FPUL sts.l FPUL,@-Rn frchg fschg fpchg nopx movx.w @Ax,Dx movx.w @Ax+,Dx movx.w @Ax+Ix,Dx movx.w Da,@Ax movx.w Da,@Ax+ movx.w Da,@Ax+Ix nopy movy.w @Ay,Dy movy.w @Ay+,Dy movy.w @Ay+Iy,Dy movy.w Da,@Ay movy.w Da,@Ay+ movy.w Da,@Ay+Iy movs.w @-As,Ds movs.w @As,Ds movs.w @As+,Ds movs.w @As+Ix,Ds movs.w Ds,@-As movs.w Ds,@As movs.w Ds,@As+ movs.w Ds,@As+Is movs.l @-As,Ds movs.l @As,Ds movs.l @As+,Ds movs.l @As+Is,Ds movs.l Ds,@-As movs.l Ds,@As movs.l Ds,@As+ movs.l Ds,@As+Is pabs Sx,Dz pabs Sy,Dz padd Sx,Sy,Dz dct padd Sx,Sy,Dz dcf padd Sx,Sy,Dz padd Sx,Sy,Du pmuls Se,Sf,Dg paddc Sx,Sy,Dz pclr Dz dct pclr Dz dcf pclr Dz pcmp Sx,Sy pcopy Sx,Dz pcopy Sy,Dz dct pcopy Sx,Dz dct pcopy Sy,Dz dcf pcopy Sx,Dz dcf pcopy Sy,Dz pneg Sx,Dz pneg Sy,Dz dct pneg Sx,Dz dct pneg Sy,Dz dcf pneg Sx,Dz dcf pneg Sy,Dz psub Sx,Sy,Dz dct psub Sx,Sy,Dz dcf psub Sx,Sy,Dz psub Sx,Sy,Du pmuls Se,Sf,Dg psubc Sx,Sy,Dz pdec Sx,Dz pdec Sy,Dz dct pdec Sx,Dz dct pdec Sy,Dz dcf pdec Sx,Dz dcf pdec Sy,Dz pinc Sx,Dz pinc Sy,Dz dct pinc Sx,Dz dct pinc Sy,Dz dcf pinc Sx,Dz dcf pinc Sy,Dz pdmsb Sx,Dz pdmsb Sy,Dz dct pdmsb Sx,Dz dct pdmsb Sy,Dz dcf pdmsb Sx,Dz dcf pdmsb Sy,Dz prnd Sx,Dz prnd Sy,Dz pand Sx,Sy,Dz dct pand Sx,Sy,Dz dcf pand Sx,Sy,Dz por Sx,Sy,Dz dct por Sx,Sy,Dz dcf por Sx,Sy,Dz pxor Sx,Sy,Dz dct pxor Sx,Sy,Dz dcf pxor Sx,Sy,Dz pmuls Se,Sf,Dg psha Sx,Sy,Dz dct psha Sx,Sy,Dz dcf psha Sx,Sy,Dz psha #imm,Dz pshl Sx,Sy,Dz dct pshl Sx,Sy,Dz dcf pshl Sx,Sy,Dz pshl #imm,Dz plds Dz,MACH plds Dz,MACL dct plds Dz,MACH dct plds Dz,MACL dcf plds Dz,MACH dcf plds Dz,MACL psts MACH,Dz psts MACL,Dz dct psts MACH,Dz dct psts MACL,Dz dcf psts MACH,Dz dcf psts MACL,Dz	T 0100nnnn00000100 MSB EX EX 1 1 1 1 1 1 1 1 1 1 1 1 Description Rotates the contents of general register Rn one bit to the left, and stores the result in Rn. The bit rotated out of the operand is transferred to the T bit. Operation void ROTL (int n) { if ((R[n] & 0x80000000) == 0) T = 0; else T = 1; R[n] LSB >> Rn >> T If Rm >= 0: Rn Rn If Rm > |Rm| -> [MSB -> Rn] T 0100nnnn00100000 MSB EX EX 1 1 1 1 1 1 1 1 1 1 1 1 Description Arithmetically shifts the contents of general register Rn one bit to the left and stores the result in Rn. The bit shifted out of the operand is transferred to the T bit. Operation void SHAL (int n) { if ((R[n] & 0x80000000) == 0) T = 0; else T = 1; R[n] MSB >> Rn >> T If Rm >= 0: Rn Rn If Rm > |Rm| -> [0 -> Rn] T 0100nnnn00000000 MSB EX EX 1 1 1 1 1 1 1 1 1 1 1 1 Description Logically shifts the contents of general register Rn one bit to the left and stores the result in Rn. The bit shifted out of the operand is transferred to the T bit. Note Effectively, the operation performed is the same as the SHAL instruction. Operation void SHLL (int n) { if ((R[n] & 0x80000000) == 0) T = 0; else T = 1; R[n] Rn Rn Rn Rn Rn Rn 0 >> Rn >> T Rn >> 2 -> [0 -> Rn] Rn >> 8 -> [0 -> Rn] Rn >> 16 -> [0 -> Rn] If T = 0: disp*2 + PC + 4 -> PC Else: nop If T = 0: disp*2 + PC + 4 -> PC Else: nop (Delayed branch) If T = 1: disp*2 + PC + 4 -> PC Else: nop If T = 1: disp*2 + PC + 4 -> PC Else: nop (Delayed branch) disp*2 + PC + 4 -> PC (Delayed branch) Rm + PC + 4 -> PC (Delayed branch) PC + 4 -> PR, disp*2 + PC + 4 -> PC (Delayed branch) PC + 4 -> PR, Rm + PC + 4 -> PC (Delayed branch) Rm -> PC (Delayed branch) PC + 4 -> PR, Rm -> PC (Delayed branch) PC + 2 -> PR, Rm -> PC PC + 2 -> PR, (disp*4 + TBR) -> PC PR -> PC Delayed branch PR -> PC Rm -> R0, PR -> PC 0 -> MACH, 0 -> MACL 0 -> S 0 -> T Invalidate instruction cache block indicated by logical address (Specified register bank entry) -> R0 Rm -> SR (Rm) -> SR, Rm+4 -> Rm Rm -> TBR Rm -> GBR (Rm) -> GBR, Rm+4 -> Rm Rm -> VBR (Rm) -> VBR, Rm+4 -> Rm Rm -> MOD (Rm) -> MOD, Rm+4 -> Rm Rm -> RE (Rm) -> RE, Rm+4 -> Rm Rm -> RS (Rm) -> RS, Rm+4 -> Rm Rm -> SGR (Rm) -> SGR, Rm+4 -> Rm Rm -> SSR (Rm) -> SSR, Rm+4 -> Rm Rm -> SPC (Rm) -> SPC, Rm+4 -> Rm Rm -> DBR (Rm) -> DBR, Rm+4 -> Rm Rm -> Rn_BANK (n = 0-7) (Rm) -> Rn_BANK, Rm+4 -> Rm disp*2 + PC -> RE disp*2 + PC -> RS Rm -> MACH (Rm) -> MACH, Rm+4 -> Rm Rm -> MACL (Rm) -> MACL, Rm+4 -> Rm Rm -> PR (Rm) -> PR, Rm+4 -> Rm Rm -> DSR (Rm) -> DSR, Rm+4 -> Rm Rm -> A0 (Rm) -> A0, Rm+4 -> Rm Rm -> X0 (Rm) -> X0, Rm+4 -> Rm Rm -> X1 (Rm) -> X1, Rm+4 -> Rm Rm -> Y0 (Rm) -> Y0, Rm+4 -> Rm Rm -> Y1 (Rm) -> Y1, Rm+4 -> Rm PTEH/PTEL -> TLB R0 -> (Rn) (without fetching cache block) No operation Invalidate operand cache block Write back and invalidate operand cache block Write back operand cache block (Rn) -> operand cache Reads 32-byte instruction block into instruction cache Bank -> R0 to R14, GBR, MACH, MACL, PR Delayed branch SH1*,SH2*: stack area -> PC/SR SH3*,SH4*: SSR/SPC -> SR/PC Rn[11:0] -> RC (SR[27:16]) imm -> RC (SR[23:16]), 0 -> SR[27:24] 1 -> T 1 -> T Sleep or standby R0 -> (specified register bank entry) SR -> Rn Rn-4 -> Rn, SR -> (Rn) TBR -> Rn GBR -> Rn Rn-4 -> Rn, GBR -> (Rn) VBR -> Rn Rn-4 -> Rn, VBR -> (Rn) MOD -> Rn Rn-4 -> Rn, MOD -> (Rn) RE -> Rn Rn-4 -> Rn, RE -> (Rn) RS -> Rn Rn-4 -> Rn, RS -> (Rn) SGR -> Rn Rn-4 -> Rn, SGR -> (Rn) SSR -> Rn Rn-4 -> Rn, SSR -> (Rn) SPC -> Rn Rn-4 -> Rn, SPC -> (Rn) DBR -> Rn Rn-4 -> Rn, DBR -> (Rn) Rm_BANK -> Rn (m = 0-7) Rn-4 -> Rn, Rm_BANK -> (Rn) (m = 0-7) MACH -> Rn Rn-4 -> Rn, MACH -> (Rn) MACL -> Rn Rn-4 -> Rn, MACL -> (Rn) PR -> Rn Rn-4 -> Rn, PR -> (Rn) DSR -> Rn Rn-4 -> Rn, DSR -> (Rn) A0 -> Rn Rn-4 -> Rn, A0 -> (Rn) X0 -> Rn Rn-4 -> Rn, X0 -> (Rn) X1 -> Rn Rn-4 -> Rn, X1 -> (Rn) Y0 -> Rn Rn-4 -> Rn, Y0 -> (Rn) Y1 -> Rn Rn-4 -> Rn, Y1 -> (Rn) Prevents the next instruction from being issued until instructions issued before this instruction has been completed. SH1*,SH2*: PC/SR -> stack area, (imm*4 + VBR) -> PC SH3*,SH4*: PC/SR -> SPC/SSR, imm*4 -> TRA, 0x160 -> EXPEVT, VBR + 0x0100 -> PC FRm -> FRn (Rm) -> FRn FRm -> (Rn) (Rm) -> FRn, Rm+4 -> Rm Rn-4 -> Rn, FRm -> (Rn) (R0 + Rm) -> FRn FRm -> (R0 + Rn) (disp*4 + Rm) -> FRn FRm -> (disp*4 + Rn) DRm -> DRn DRm -> XDn XDm -> DRn XDm -> XDn (Rm) -> DRn (Rm) -> XDn DRm -> (Rn) XDm -> (Rn) (Rm) -> DRn, Rm + 8 -> Rm (Rm) -> XDn, Rm+8 -> Rm Rn-8 -> Rn, DRm -> (Rn) Rn-8 -> Rn, (Rn) -> XDm (R0 + Rm) -> DRn (R0 + Rm) -> XDn DRm -> (R0 + Rn) XDm -> (R0 + Rn) (disp*8 + Rm) -> DRn DRm -> (disp*8 + Rn) 0x00000000 -> FRn 0x3F800000 -> FRn FRm -> FPUL FPUL -> FRn FRn & 0x7FFFFFFF -> FRn FRn ^ 0x80000000 -> FRn FRn + FRm -> FRn FRn - FRm -> FRn FRn * FRm -> FRn FR0 * FRm + FRn -> FRn FRn / FRm -> FRn sqrt (FRn) -> FRn If FRn = FRm: 1 -> T Else: 0 -> T If FRn > FRm: 1 -> T Else: 0 -> T (float)FPUL -> FRn (long)FRm -> FPUL inner_product (FVm, FVn) -> FR[n+3] transform_vector (XMTRX, FVn) -> FVn 1.0 / sqrt (FRn) -> FRn sin (FPUL) -> FRn cos (FPUL) -> FR[n+1] DRn & 0x7FFFFFFFFFFFFFFF -> DRn DRn ^ 0x8000000000000000 -> DRn DRn + DRm -> DRn DRn - DRm -> DRn DRn * DRm -> DRn DRn / DRm -> DRn sqrt (DRn) -> DRn If DRn = DRm: 1 -> T Else: 0 -> T If DRn > DRm: 1 -> T Else: 0 -> T (double)FPUL -> DRn (long)DRm -> FPUL double_to_float (DRm) -> FPUL float_to_double (FPUL) -> DRn Rm -> FPSCR FPSCR -> Rn (Rm) -> FPSCR, Rm+4 -> Rm Rn-4 -> Rn, FPSCR -> (Rn) Rm -> FPUL FPUL -> Rn (Rm) -> FPUL, Rm+4 -> Rm Rn-4 -> Rn, FPUL -> (Rn) If FPSCR.PR = 0: ~FPSCR.FR -> FPSCR.FR Else: Undefined Operation If FPSCR.PR = 0: ~FPSCR.SZ -> FPSCR.SZ Else: Undefined Operation ~FPSCR.PR -> FPSCR.PR No operation (Ax) -> MSW of Dx, 0 -> LSW of Dx (Ax) -> MSW of Dx, 0 -> LSW of Dx, Ax+2 -> Ax (Ax) -> MSW of Dx, 0 -> LSW of Dx, Ax+Ix -> Ax MSW of Da -> (Ax) MSW of Da -> (Ax), Ax+2 -> Ax MSW of Da -> (Ax), Ax+Ix -> Ax No Operation (Ay) -> MSW of Dy, 0 -> LSW of Dy (Ay) -> MSW of Dy, 0 -> LSW of Dy, Ay+2 -> Ay (Ay) -> MSW of Dy, 0 -> LSW of Dy, Ay+Iy -> Ay MSW of Da -> (Ay) MSW of Da -> (Ay), Ay+2 -> Ay MSW of Da -> (Ay), Ay+Iy -> Ay As-2 -> As, (As) -> MSW of Ds, 0 -> LSW of Ds (As) -> MSW of Ds, 0 -> LSW of Ds (As) -> MSW of Ds, 0 -> LSW of Ds, As+2 -> As (As) -> MSW of Ds, 0 -> LSW of DS, As+Ix -> As As-2 -> As, MSW of Ds -> (As) MSW of Ds -> (As) MSW of Ds -> (As), As+2 -> As MSW of DS -> (As), As+Is -> As As-4 -> As, (As) -> Ds (As) -> Ds (As) -> Ds, As+4 -> As (As) -> Ds, As+Is -> As As-4 -> As, Ds -> (As) Ds -> (As) Ds -> (As), As+4 -> As Ds -> (As), As+Is -> As If Sx >= 0: Sx -> Dz If Sx Dz If Sy >= 0: Sy -> Dz If Sy Dz Sx + Sy -> Dz If DC = 1: Sx + Sy -> Dz Else: nop If DC = 0: Sx + Sy -> Dz Else: nop Sx + Sy -> Du MSW of Se * MSW of Sf -> Dg Sx + Sy + DC -> Dz 0x00000000 -> Dz If DC = 1: 0x00000000 -> Dz Else: nop If DC = 0: 0x00000000 -> Dz Else: nop Sx - Sy Sx -> Dz Sy -> Dz If DC = 1: Sx -> Dz Else: nop If DC = 1: Sy -> Dz Else: nop If DC = 0: Sx -> Dz Else: nop If DC = 0: Sy -> Dz Else: nop 0 - Sx -> Dz 0 - Sy -> Dz If DC = 1: 0 - Sx -> Dz Else: nop If DC = 1: 0 - Sy -> Dz Else: nop If DC = 0: 0 - Sx -> Dz Else: nop If DC = 0: 0 - Sy -> Dz Else: nop Sx - Sy -> Dz If DC = 1: Sx - Sy -> Dz Else: nop If DC = 0: Sx - Sy -> Dz Else: nop Sx - Sy -> Du MSW of Se * MSW of Sf -> Dg Sx - Sy - DC -> Dz MSW of Sx - 1 -> MSW of Dz, clear LSW of Dz MSW of Sy - 1 -> MSW of Dz, clear LSW of Dz If DC = 1: MSW of Sx - 1 -> MSW of DZ, clear LSW of Dz Else: nop If DC = 1: MSW of Sy - 1 -> MSW of DZ, clear LSW of Dz Else: nop If DC = 0: MSW of Sx - 1 -> MSW of DZ, clear LSW of Dz Else: nop If DC = 0: MSW of Sy - 1 -> MSW of DZ, clear LSW of Dz Else: nop MSW of Sy + 1 -> MSW of Dz, clear LSW of Dz MSW of Sy + 1 -> MSW of Dz, clear LSW of Dz If DC = 1: MSW of Sx + 1 -> MSW of Dz, clear LSW of Dz Else: nop If DC = 1: MSW of Sy + 1 -> MSW of Dz, clear LSW of Dz Else: nop If DC = 0: MSW of Sx + 1 -> MSW of Dz, clear LSW of Dz Else: nop If DC = 0: MSW of Sy + 1 -> MSW of Dz, clear LSW of Dz Else: nop Sx data MSB position -> MSW of Dz, clear LSW of Dz Sy data MSB position -> MSW of Dz, clear LSW of Dz If DC = 1: Sx data MSB position -> MSW of Dz, clear LSW of Dz Else: nop If DC = 1: Sy data MSB position -> MSW of Dz, clear LSW of Dz Else: nop If DC = 0: Sx data MSB position -> MSW of Dz, clear LSW of Dz Else: nop If DC = 0: Sy data MSB position -> MSW of Dz, clear LSW of Dz Else: nop Sx + 0x00008000 -> Dz, clear LSW of Dz Sy + 0x00008000 -> Dz, clear LSW of Dz Sx & Sy -> Dz, clear LSW of Dz If DC = 1: Sx & Sy -> Dz, clear LSW of Dz Else: nop If DC = 0: Sx & Sy -> Dz, clear LSW of Dz Else: nop Sx | Sy -> Dz, clear LSW of Dz If DC = 1: Sx | Sy -> Dz, clear LSW of Dz Else: nop If DC = 0: Sx | Sy -> Dz, clear LSW of Dz Else: nop Sx ^ Sy -> Dz, clear LSW of Dz If DC = 1: Sx ^ Sy -> Dz, clear LSW of Dz Else: nop If DC = 0: Sx ^ Sy -> Dz, clear LSW of Dz Else: nop MSW of Se * MSW of Sf -> Dg If Sy >= 0: Sx Dz If Sy > Sy -> Dz If DC = 1 & Sy >= 0: Sx Dz If DC = 1 & Sy > Sy -> Dz If DC = 0: nop If DC = 0 & Sy >= 0: Sx Dz If DC = 0 & Sy > Sy -> Dz If DC = 1: nop If imm >= 0: Dz Dz If imm > imm -> Dz If Sy >= 0: Sx Dz, clear LSW of Dz If Sy > Sy -> Dz, clear LSW of Dz If DC = 1 & Sy >= 0: Sx Dz, clear LSW of Dz If DC = 1 & Sy > Sy -> Dz, clear LSW of Dz If DC = 0: nop If DC = 0 & Sy >= 0: Sx Dz, clear LSW of Dz If DC = 0 & Sy > Sy -> Dz, clear LSW of Dz If DC = 1: nop If imm >= 0: Dz Dz, clear LSW of Dz If imm > imm, clear LSW of Dz Dz -> MACH Dz -> MACL If DC = 1: Dz -> MACH Else: nop If DC = 1: Dz -> MACL Else: nop If DC = 0: Dz -> MACH Else: nop If DC = 0: Dz -> MACL Else: nop MACH -> Dz MACL -> Dz If DC = 1: MACH -> Dz Else: nop If DC = 1: MACL -> Dz Else: nop If DC = 0: MACH -> Dz Else: nop If DC = 0: MACL -> Dz Else: nop	0100nnnn00000100 0100nnnn00000101 0100nnnnmmmm1100 0100nnnn00100000 0100nnnn00100001 0100nnnnmmmm1101 0100nnnn00000000 0100nnnn00001000 0100nnnn00011000 0100nnnn00101000 0100nnnn00000001 0100nnnn00001001 0100nnnn00011001 0100nnnn00101001 10001011dddddddd 10001111dddddddd 10001001dddddddd 10001101dddddddd 1010dddddddddddd 0000mmmm00100011 1011dddddddddddd 0000mmmm00000011 0100mmmm00101011 0100mmmm00001011 0100mmmm01001011 10000011dddddddd 0000000000001011 0000000001101011 0000mmmm01111011 0000000000101000 0000000001001000 0000000000001000 0000nnnn11100011 0100mmmm11100101 0100mmmm00001110 0100mmmm00000111 0100mmmm01001010 0100mmmm00011110 0100mmmm00010111 0100mmmm00101110 0100mmmm00100111 0100mmmm01011110 0100mmmm01010111 0100mmmm01111110 0100mmmm01110111 0100mmmm01101110 0100mmmm01100111 0100mmmm00111010 0100mmmm00110110 0100mmmm00111110 0100mmmm00110111 0100mmmm01001110 0100mmmm01000111 0100mmmm11110110 0100mmmm11110110 0100mmmm1nnn1110 0100mmmm1nnn0111 10001110dddddddd 10001100dddddddd 0100mmmm00001010 0100mmmm00000110 0100mmmm00011010 0100mmmm00010110 0100mmmm00101010 0100mmmm00100110 0100mmmm01101010 0100mmmm01100110 0100mmmm01110110 0100mmmm01110110 0100mmmm10001010 0100nnnn10000110 0100mmmm10011010 0100nnnn10010110 0100mmmm10101010 0100nnnn10100110 0100mmmm10111010 0100nnnn10110110 0000000000111000 0000nnnn11000011 0000000000001001 0000nnnn10010011 0000nnnn10100011 0000nnnn10110011 0000nnnn10000011 0000nnnn11010011 0000000001011011 0000000000101011 0100mmmm00010100 10000010iiiiiiii 0000000000011000 0000000000011000 0000000000011011 0100nnnn11100001 0000nnnn00000010 0100nnnn00000011 0000nnnn01001010 0000nnnn00010010 0100nnnn00010011 0000nnnn00100010 0100nnnn00100011 0000nnnn01010010 0100nnnn01010011 0000nnnn01110010 0100nnnn01110011 0000nnnn01100010 0100nnnn01100011 0000nnnn00111010 0100nnnn00110010 0000nnnn00110010 0100nnnn00110011 0000nnnn01000010 0100nnnn01000011 0000nnnn11111010 0100nnnn11110010 0000nnnn1mmm0010 0100nnnn1mmm0011 0000nnnn00001010 0100nnnn00000010 0000nnnn00011010 0100nnnn00010010 0000nnnn00101010 0100nnnn00100010 0000nnnn01101010 0100nnnn01100010 0000nnnn01111010 0100nnnn01100010 0000nnnn10001010 0100nnnn10000010 0000nnnn10011010 0100nnnn10010010 0000nnnn10101010 0100nnnn10100010 0000nnnn10111010 0100nnnn10110010 0000000010101011 11000011iiiiiiii 1111nnnnmmmm1100 1111nnnnmmmm1000 1111nnnnmmmm1010 1111nnnnmmmm1001 1111nnnnmmmm1011 1111nnnnmmmm0110 1111nnnnmmmm0111 0011nnnnmmmm0001 0111dddddddddddd 0011nnnnmmmm0001 0011dddddddddddd 1111nnn0mmm01100 1111nnn1mmm01100 1111nnn0mmm11100 1111nnn1mmm11100 1111nnn0mmmm1000 1111nnn1mmmm1000 1111nnnnmmm01010 1111nnnnmmm11010 1111nnn0mmmm1001 1111nnn1mmmm1001 1111nnnnmmm01011 1111nnnnmmm11011 1111nnn0mmmm0110 1111nnn1mmmm0110 1111nnnnmmm00111 1111nnnnmmm10111 0011nnn0mmmm0001 0111dddddddddddd 0011nnnnmmm00001 0011dddddddddddd 1111nnnn10001101 1111nnnn10011101 1111mmmm00011101 1111nnnn00001101 1111nnnn01011101 1111nnnn01001101 1111nnnnmmmm0000 1111nnnnmmmm0001 1111nnnnmmmm0010 1111nnnnmmmm1110 1111nnnnmmmm0011 1111nnnn01101101 1111nnnnmmmm0100 1111nnnnmmmm0101 1111nnnn00101101 1111mmmm00111101 1111nnmm11101101 1111nn0111111101 1111nnnn01111101 1111nnn011111101 1111nnn001011101 1111nnn001001101 1111nnn0mmm00000 1111nnn0mmm00001 1111nnn0mmm00010 1111nnn0mmm00011 1111nnn001101101 1111nnn0mmm00100 1111nnn0mmm00101 1111nnn000101101 1111mmm000111101 1111mmm010111101 1111nnn010101101 0100mmmm01101010 0000nnnn01101010 0100mmmm01100110 0100nnnn01100010 0100mmmm01011010 0000nnnn01011010 0100mmmm01010110 0100nnnn01010010 1111101111111101 1111001111111101 1111011111111101 1111000*0*0*00** 111100A*D*0*01** 111100A*D*0*10** 111100A*D*0*11** 111100A*D*1*01** 111100A*D*1*10** 111100A*D*1*11** 111100*0*0*0**00 111100*A*D*0**01 111100*A*D*0**10 111100*A*D*0**11 111100*A*D*1**01 111100*A*D*1**10 111100*A*D*1**11 111101AADDDD0000 111101AADDDD0100 111101AADDDD1000 111101AADDDD1100 111101AADDDD0001 111101AADDDD0101 111101AADDDD1001 111101AADDDD1101 111101AADDDD0010 111101AADDDD0110 111101AADDDD1010 111101AADDDD1110 111101AADDDD0011 111101AADDDD0111 111101AADDDD1011 111101AADDDD1111 111110********** 10001000xx00zzzz 111110********** 1010100000yyzzzz 111110********** 10110001xxyyzzzz 111110********** 10110010xxyyzzzz 111110********** 10110011xxyyzzzz 111110********** 0111eeffxxyygguu 111110********** 10110000xxyyzzzz 111110********** 100011010000zzzz 111110********** 100011100000zzzz 111110********** 100011110000zzzz 111110********** 10000100xxyy0000 111110********** 11011001xx00zzzz 111110********** 1111100100yyzzzz 111110********** 11011010xx00zzzz 111110********** 1111101000yyzzzz 111110********** 11011011xx00zzzz 111110********** 1111101100yyzzzz 111110********** 11001001xx00zzzz 111110********** 1110100100yyzzzz 111110********** 11001010xx00zzzz 111110********** 1110101000yyzzzz 111110********** 11001011xx00zzzz 111110********** 1110101100yyzzzz 111110********** 10100001xxyyzzzz 111110********** 10100010xxyyzzzz 111110********** 10100011xxyyzzzz 111110********** 0110eeffxxyygguu 111110********** 10100000xxyyzzzz 111110********** 10001001xx00zzzz 111110********** 1010100100yyzzzz 111110********** 10001010xx00zzzz 111110********** 1010101000yyzzzz 111110********** 10001011xx00zzzz 111110********** 1010101100yyzzzz 111110********** 10011001xx00zzzz 111110********** 1011100100yyzzzz 111110********** 10011010xx00zzzz 111110********** 1011101000yyzzzz 111110********** 10011011xx00zzzz 111110********** 1011101100yyzzzz 111110********** 10011101xx00zzzz 111110********** 1011110100yyzzzz 111110********** 10011110xx00zzzz 111110********** 1011111000yyzzzz 111110********** 10011111xx00zzzz 111110********** 1011111100yyzzzz 111110********** 10011000xx00zzzz 111110********** 1011100000yyzzzz 111110********** 10010101xxyyzzzz 111110********** 10010110xxyyzzzz 111110********** 10010111xxyyzzzz 111110********** 10110101xxyyzzzz 111110********** 10110110xxyyzzzz 111110********** 10110111xxyyzzzz 111110********** 10100101xxyyzzzz 111110********** 10100110xxyyzzzz 111110********** 10100111xxyyzzzz 111110********** 0100eeff0000gg00 111110********** 10010001xxyyzzzz 111110********** 10010010xxyyzzzz 111110********** 10010011xxyyzzzz 111110********** 00000iiiiiiizzzz 111110********** 10000001xxyyzzzz 111110********** 10000010xxyyzzzz 111110********** 10000011xxyyzzzz 111110********** 00010iiiiiiizzzz 111110********** 111011010000zzzz 111110********** 111111010000zzzz 111110********** 111011100000zzzz 111110********** 111111100000zzzz 111110********** 111011110000zzzz 111110********** 111111110000zzzz 111110********** 110011010000zzzz 111110********** 110111010000zzzz 111110********** 110011100000zzzz 111110********** 110111100000zzzz 111110********** 110011110000zzzz 111110********** 110111110000zzzz	MSB LSB MSB LSB MSB LSB 0 LSB LSB 1 Result Result Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update	
rotr Rn	LSB >> Rn >> T	0100nnnn00000101	LSB	
shad Rm,Rn	If Rm >= 0: Rn Rn If Rm > |Rm| -> [MSB -> Rn]	0100nnnnmmmm1100		
shal Rn shar Rn shld Rm,Rn shll Rn shll2 Rn shll8 Rn shll16 Rn shlr Rn shlr2 Rn shlr8 Rn shlr16 Rn bf label bf/s label bt label bt/s label bra label braf Rm bsr label bsrf Rm jmp @Rm jsr @Rm jsr/n @Rm jsr/n @@(disp8,TBR) rts rts/n rtv/n Rm clrmac clrs clrt icbi @Rn ldbank @Rm,R0 ldc Rm,SR ldc.l @Rm+,SR ldc Rm,TBR ldc Rm,GBR ldc.l @Rm+,GBR ldc Rm,VBR ldc.l @Rm+,VBR ldc Rm,MOD ldc.l @Rm+,MOD ldc Rm,RE ldc.l @Rm+,RE ldc Rm,RS ldc.l @Rm+,RS ldc Rm,SGR ldc.l @Rm+,SGR ldc Rm,SSR ldc.l @Rm+,SSR ldc Rm,SPC ldc.l @Rm+,SPC ldc Rm,DBR ldc.l @Rm+,DBR ldc Rm,Rn_BANK ldc.l @Rm+,Rn_BANK ldre @(disp,PC) ldrs @(disp,PC) lds Rm,MACH lds.l @Rm+,MACH lds Rm,MACL lds.l @Rm+,MACL lds Rm,PR lds.l @Rm+,PR lds Rm,DSR lds.l @Rm+,DSR lds Rm,A0 lds.l @Rm+,A0 lds Rm,X0 lds.l @Rm+,X0 lds Rm,X1 lds.l @Rm+,X1 lds Rm,Y0 lds.l @Rm+,Y0 lds Rm,Y1 lds.l @Rm+,Y1 ldtbl movca.l R0,@Rn nop ocbi @Rn ocbp @Rn ocbwb @Rn pref @Rn prefi @Rn resbank rte setrc Rn setrc #imm sets sett sleep stbank R0,@Rn stc SR,Rn stc.l SR,@-Rn stc TBR,Rn stc GBR,Rn stc.l GBR,@-Rn stc VBR,Rn stc.l VBR,@-Rn stc MOD,Rn stc.l MOD,@-Rn stc RE,Rn stc.l RE,@-Rn stc RS,Rn stc.l RS,@-Rn stc SGR,Rn stc.l SGR,@-Rn stc SSR,Rn stc.l SSR,@-Rn stc SPC,Rn stc.l SPC,@-Rn stc DBR,Rn stc.l DBR,@-Rn stc Rm_BANK,Rn stc.l Rm_BANK,@-Rn sts MACH,Rn sts.l MACH,@-Rn sts MACL,Rn sts.l MACL,@-Rn sts PR,Rn sts.l PR,@-Rn sts DSR,Rn sts.l DSR,@-Rn sts A0,Rn sts.l A0,@-Rn sts X0,Rn sts.l X0,@-Rn sts X1,Rn sts.l X1,@-Rn sts Y0,Rn sts.l Y0,@-Rn sts Y1,Rn sts.l Y1,@-Rn synco trapa #imm fmov FRm,FRn fmov.s @Rm,FRn fmov.s FRm,@Rn fmov.s @Rm+,FRn fmov.s FRm,@-Rn fmov.s @(R0,Rm),FRn fmov.s FRm,@(R0,Rn) fmov.s @(disp12,Rm),FRn fmov.s FRm,@(disp12,Rn) fmov DRm,DRn fmov DRm,XDn fmov XDm,DRn fmov XDm,XDn fmov.d @Rm,DRn fmov.d @Rm,XDn fmov.d DRm,@Rn fmov.d XDm,@Rn fmov.d @Rm+,DRn fmov.d @Rm+,XDn fmov.d DRm,@-Rn fmov.d XDm,@-Rn fmov.d @(R0,Rm),DRn fmov.d @(R0,Rm),XDn fmov.d DRm,@(R0,Rn) fmov.d XDm,@(R0,Rn) fmov.d @(disp12,Rm),DRn fmov.d DRm,@(disp12,Rn) fldi0 FRn fldi1 FRn flds FRm,FPUL fsts FPUL,FRn fabs FRn fneg FRn fadd FRm,FRn fsub FRm,FRn fmul FRm,FRn fmac FR0,FRm,FRn fdiv FRm,FRn fsqrt FRn fcmp/eq FRm,FRn fcmp/gt FRm,FRn float FPUL,FRn ftrc FRm,FPUL fipr FVm,FVn ftrv XMTRX,FVn fsrra FRn fsca FPUL,DRn fabs DRn fneg DRn fadd DRm,DRn fsub DRm,DRn fmul DRm,DRn fdiv DRm,DRn fsqrt DRn fcmp/eq DRm,DRn fcmp/gt DRm,DRn float FPUL,DRn ftrc DRm,FPUL fcnvds DRm,FPUL fcnvsd FPUL,DRn lds Rm,FPSCR sts FPSCR,Rn lds.l @Rm+,FPSCR sts.l FPSCR,@-Rn lds Rm,FPUL sts FPUL,Rn lds.l @Rm+,FPUL sts.l FPUL,@-Rn frchg fschg fpchg nopx movx.w @Ax,Dx movx.w @Ax+,Dx movx.w @Ax+Ix,Dx movx.w Da,@Ax movx.w Da,@Ax+ movx.w Da,@Ax+Ix nopy movy.w @Ay,Dy movy.w @Ay+,Dy movy.w @Ay+Iy,Dy movy.w Da,@Ay movy.w Da,@Ay+ movy.w Da,@Ay+Iy movs.w @-As,Ds movs.w @As,Ds movs.w @As+,Ds movs.w @As+Ix,Ds movs.w Ds,@-As movs.w Ds,@As movs.w Ds,@As+ movs.w Ds,@As+Is movs.l @-As,Ds movs.l @As,Ds movs.l @As+,Ds movs.l @As+Is,Ds movs.l Ds,@-As movs.l Ds,@As movs.l Ds,@As+ movs.l Ds,@As+Is pabs Sx,Dz pabs Sy,Dz padd Sx,Sy,Dz dct padd Sx,Sy,Dz dcf padd Sx,Sy,Dz padd Sx,Sy,Du pmuls Se,Sf,Dg paddc Sx,Sy,Dz pclr Dz dct pclr Dz dcf pclr Dz pcmp Sx,Sy pcopy Sx,Dz pcopy Sy,Dz dct pcopy Sx,Dz dct pcopy Sy,Dz dcf pcopy Sx,Dz dcf pcopy Sy,Dz pneg Sx,Dz pneg Sy,Dz dct pneg Sx,Dz dct pneg Sy,Dz dcf pneg Sx,Dz dcf pneg Sy,Dz psub Sx,Sy,Dz dct psub Sx,Sy,Dz dcf psub Sx,Sy,Dz psub Sx,Sy,Du pmuls Se,Sf,Dg psubc Sx,Sy,Dz pdec Sx,Dz pdec Sy,Dz dct pdec Sx,Dz dct pdec Sy,Dz dcf pdec Sx,Dz dcf pdec Sy,Dz pinc Sx,Dz pinc Sy,Dz dct pinc Sx,Dz dct pinc Sy,Dz dcf pinc Sx,Dz dcf pinc Sy,Dz pdmsb Sx,Dz pdmsb Sy,Dz dct pdmsb Sx,Dz dct pdmsb Sy,Dz dcf pdmsb Sx,Dz dcf pdmsb Sy,Dz prnd Sx,Dz prnd Sy,Dz pand Sx,Sy,Dz dct pand Sx,Sy,Dz dcf pand Sx,Sy,Dz por Sx,Sy,Dz dct por Sx,Sy,Dz dcf por Sx,Sy,Dz pxor Sx,Sy,Dz dct pxor Sx,Sy,Dz dcf pxor Sx,Sy,Dz pmuls Se,Sf,Dg psha Sx,Sy,Dz dct psha Sx,Sy,Dz dcf psha Sx,Sy,Dz psha #imm,Dz pshl Sx,Sy,Dz dct pshl Sx,Sy,Dz dcf pshl Sx,Sy,Dz pshl #imm,Dz plds Dz,MACH plds Dz,MACL dct plds Dz,MACH dct plds Dz,MACL dcf plds Dz,MACH dcf plds Dz,MACL psts MACH,Dz psts MACL,Dz dct psts MACH,Dz dct psts MACL,Dz dcf psts MACH,Dz dcf psts MACL,Dz	T 0100nnnn00100000 MSB EX EX 1 1 1 1 1 1 1 1 1 1 1 1 Description Arithmetically shifts the contents of general register Rn one bit to the left and stores the result in Rn. The bit shifted out of the operand is transferred to the T bit. Operation void SHAL (int n) { if ((R[n] & 0x80000000) == 0) T = 0; else T = 1; R[n] MSB >> Rn >> T If Rm >= 0: Rn Rn If Rm > |Rm| -> [0 -> Rn] T 0100nnnn00000000 MSB EX EX 1 1 1 1 1 1 1 1 1 1 1 1 Description Logically shifts the contents of general register Rn one bit to the left and stores the result in Rn. The bit shifted out of the operand is transferred to the T bit. Note Effectively, the operation performed is the same as the SHAL instruction. Operation void SHLL (int n) { if ((R[n] & 0x80000000) == 0) T = 0; else T = 1; R[n] Rn Rn Rn Rn Rn Rn 0 >> Rn >> T Rn >> 2 -> [0 -> Rn] Rn >> 8 -> [0 -> Rn] Rn >> 16 -> [0 -> Rn] If T = 0: disp*2 + PC + 4 -> PC Else: nop If T = 0: disp*2 + PC + 4 -> PC Else: nop (Delayed branch) If T = 1: disp*2 + PC + 4 -> PC Else: nop If T = 1: disp*2 + PC + 4 -> PC Else: nop (Delayed branch) disp*2 + PC + 4 -> PC (Delayed branch) Rm + PC + 4 -> PC (Delayed branch) PC + 4 -> PR, disp*2 + PC + 4 -> PC (Delayed branch) PC + 4 -> PR, Rm + PC + 4 -> PC (Delayed branch) Rm -> PC (Delayed branch) PC + 4 -> PR, Rm -> PC (Delayed branch) PC + 2 -> PR, Rm -> PC PC + 2 -> PR, (disp*4 + TBR) -> PC PR -> PC Delayed branch PR -> PC Rm -> R0, PR -> PC 0 -> MACH, 0 -> MACL 0 -> S 0 -> T Invalidate instruction cache block indicated by logical address (Specified register bank entry) -> R0 Rm -> SR (Rm) -> SR, Rm+4 -> Rm Rm -> TBR Rm -> GBR (Rm) -> GBR, Rm+4 -> Rm Rm -> VBR (Rm) -> VBR, Rm+4 -> Rm Rm -> MOD (Rm) -> MOD, Rm+4 -> Rm Rm -> RE (Rm) -> RE, Rm+4 -> Rm Rm -> RS (Rm) -> RS, Rm+4 -> Rm Rm -> SGR (Rm) -> SGR, Rm+4 -> Rm Rm -> SSR (Rm) -> SSR, Rm+4 -> Rm Rm -> SPC (Rm) -> SPC, Rm+4 -> Rm Rm -> DBR (Rm) -> DBR, Rm+4 -> Rm Rm -> Rn_BANK (n = 0-7) (Rm) -> Rn_BANK, Rm+4 -> Rm disp*2 + PC -> RE disp*2 + PC -> RS Rm -> MACH (Rm) -> MACH, Rm+4 -> Rm Rm -> MACL (Rm) -> MACL, Rm+4 -> Rm Rm -> PR (Rm) -> PR, Rm+4 -> Rm Rm -> DSR (Rm) -> DSR, Rm+4 -> Rm Rm -> A0 (Rm) -> A0, Rm+4 -> Rm Rm -> X0 (Rm) -> X0, Rm+4 -> Rm Rm -> X1 (Rm) -> X1, Rm+4 -> Rm Rm -> Y0 (Rm) -> Y0, Rm+4 -> Rm Rm -> Y1 (Rm) -> Y1, Rm+4 -> Rm PTEH/PTEL -> TLB R0 -> (Rn) (without fetching cache block) No operation Invalidate operand cache block Write back and invalidate operand cache block Write back operand cache block (Rn) -> operand cache Reads 32-byte instruction block into instruction cache Bank -> R0 to R14, GBR, MACH, MACL, PR Delayed branch SH1*,SH2*: stack area -> PC/SR SH3*,SH4*: SSR/SPC -> SR/PC Rn[11:0] -> RC (SR[27:16]) imm -> RC (SR[23:16]), 0 -> SR[27:24] 1 -> T 1 -> T Sleep or standby R0 -> (specified register bank entry) SR -> Rn Rn-4 -> Rn, SR -> (Rn) TBR -> Rn GBR -> Rn Rn-4 -> Rn, GBR -> (Rn) VBR -> Rn Rn-4 -> Rn, VBR -> (Rn) MOD -> Rn Rn-4 -> Rn, MOD -> (Rn) RE -> Rn Rn-4 -> Rn, RE -> (Rn) RS -> Rn Rn-4 -> Rn, RS -> (Rn) SGR -> Rn Rn-4 -> Rn, SGR -> (Rn) SSR -> Rn Rn-4 -> Rn, SSR -> (Rn) SPC -> Rn Rn-4 -> Rn, SPC -> (Rn) DBR -> Rn Rn-4 -> Rn, DBR -> (Rn) Rm_BANK -> Rn (m = 0-7) Rn-4 -> Rn, Rm_BANK -> (Rn) (m = 0-7) MACH -> Rn Rn-4 -> Rn, MACH -> (Rn) MACL -> Rn Rn-4 -> Rn, MACL -> (Rn) PR -> Rn Rn-4 -> Rn, PR -> (Rn) DSR -> Rn Rn-4 -> Rn, DSR -> (Rn) A0 -> Rn Rn-4 -> Rn, A0 -> (Rn) X0 -> Rn Rn-4 -> Rn, X0 -> (Rn) X1 -> Rn Rn-4 -> Rn, X1 -> (Rn) Y0 -> Rn Rn-4 -> Rn, Y0 -> (Rn) Y1 -> Rn Rn-4 -> Rn, Y1 -> (Rn) Prevents the next instruction from being issued until instructions issued before this instruction has been completed. SH1*,SH2*: PC/SR -> stack area, (imm*4 + VBR) -> PC SH3*,SH4*: PC/SR -> SPC/SSR, imm*4 -> TRA, 0x160 -> EXPEVT, VBR + 0x0100 -> PC FRm -> FRn (Rm) -> FRn FRm -> (Rn) (Rm) -> FRn, Rm+4 -> Rm Rn-4 -> Rn, FRm -> (Rn) (R0 + Rm) -> FRn FRm -> (R0 + Rn) (disp*4 + Rm) -> FRn FRm -> (disp*4 + Rn) DRm -> DRn DRm -> XDn XDm -> DRn XDm -> XDn (Rm) -> DRn (Rm) -> XDn DRm -> (Rn) XDm -> (Rn) (Rm) -> DRn, Rm + 8 -> Rm (Rm) -> XDn, Rm+8 -> Rm Rn-8 -> Rn, DRm -> (Rn) Rn-8 -> Rn, (Rn) -> XDm (R0 + Rm) -> DRn (R0 + Rm) -> XDn DRm -> (R0 + Rn) XDm -> (R0 + Rn) (disp*8 + Rm) -> DRn DRm -> (disp*8 + Rn) 0x00000000 -> FRn 0x3F800000 -> FRn FRm -> FPUL FPUL -> FRn FRn & 0x7FFFFFFF -> FRn FRn ^ 0x80000000 -> FRn FRn + FRm -> FRn FRn - FRm -> FRn FRn * FRm -> FRn FR0 * FRm + FRn -> FRn FRn / FRm -> FRn sqrt (FRn) -> FRn If FRn = FRm: 1 -> T Else: 0 -> T If FRn > FRm: 1 -> T Else: 0 -> T (float)FPUL -> FRn (long)FRm -> FPUL inner_product (FVm, FVn) -> FR[n+3] transform_vector (XMTRX, FVn) -> FVn 1.0 / sqrt (FRn) -> FRn sin (FPUL) -> FRn cos (FPUL) -> FR[n+1] DRn & 0x7FFFFFFFFFFFFFFF -> DRn DRn ^ 0x8000000000000000 -> DRn DRn + DRm -> DRn DRn - DRm -> DRn DRn * DRm -> DRn DRn / DRm -> DRn sqrt (DRn) -> DRn If DRn = DRm: 1 -> T Else: 0 -> T If DRn > DRm: 1 -> T Else: 0 -> T (double)FPUL -> DRn (long)DRm -> FPUL double_to_float (DRm) -> FPUL float_to_double (FPUL) -> DRn Rm -> FPSCR FPSCR -> Rn (Rm) -> FPSCR, Rm+4 -> Rm Rn-4 -> Rn, FPSCR -> (Rn) Rm -> FPUL FPUL -> Rn (Rm) -> FPUL, Rm+4 -> Rm Rn-4 -> Rn, FPUL -> (Rn) If FPSCR.PR = 0: ~FPSCR.FR -> FPSCR.FR Else: Undefined Operation If FPSCR.PR = 0: ~FPSCR.SZ -> FPSCR.SZ Else: Undefined Operation ~FPSCR.PR -> FPSCR.PR No operation (Ax) -> MSW of Dx, 0 -> LSW of Dx (Ax) -> MSW of Dx, 0 -> LSW of Dx, Ax+2 -> Ax (Ax) -> MSW of Dx, 0 -> LSW of Dx, Ax+Ix -> Ax MSW of Da -> (Ax) MSW of Da -> (Ax), Ax+2 -> Ax MSW of Da -> (Ax), Ax+Ix -> Ax No Operation (Ay) -> MSW of Dy, 0 -> LSW of Dy (Ay) -> MSW of Dy, 0 -> LSW of Dy, Ay+2 -> Ay (Ay) -> MSW of Dy, 0 -> LSW of Dy, Ay+Iy -> Ay MSW of Da -> (Ay) MSW of Da -> (Ay), Ay+2 -> Ay MSW of Da -> (Ay), Ay+Iy -> Ay As-2 -> As, (As) -> MSW of Ds, 0 -> LSW of Ds (As) -> MSW of Ds, 0 -> LSW of Ds (As) -> MSW of Ds, 0 -> LSW of Ds, As+2 -> As (As) -> MSW of Ds, 0 -> LSW of DS, As+Ix -> As As-2 -> As, MSW of Ds -> (As) MSW of Ds -> (As) MSW of Ds -> (As), As+2 -> As MSW of DS -> (As), As+Is -> As As-4 -> As, (As) -> Ds (As) -> Ds (As) -> Ds, As+4 -> As (As) -> Ds, As+Is -> As As-4 -> As, Ds -> (As) Ds -> (As) Ds -> (As), As+4 -> As Ds -> (As), As+Is -> As If Sx >= 0: Sx -> Dz If Sx Dz If Sy >= 0: Sy -> Dz If Sy Dz Sx + Sy -> Dz If DC = 1: Sx + Sy -> Dz Else: nop If DC = 0: Sx + Sy -> Dz Else: nop Sx + Sy -> Du MSW of Se * MSW of Sf -> Dg Sx + Sy + DC -> Dz 0x00000000 -> Dz If DC = 1: 0x00000000 -> Dz Else: nop If DC = 0: 0x00000000 -> Dz Else: nop Sx - Sy Sx -> Dz Sy -> Dz If DC = 1: Sx -> Dz Else: nop If DC = 1: Sy -> Dz Else: nop If DC = 0: Sx -> Dz Else: nop If DC = 0: Sy -> Dz Else: nop 0 - Sx -> Dz 0 - Sy -> Dz If DC = 1: 0 - Sx -> Dz Else: nop If DC = 1: 0 - Sy -> Dz Else: nop If DC = 0: 0 - Sx -> Dz Else: nop If DC = 0: 0 - Sy -> Dz Else: nop Sx - Sy -> Dz If DC = 1: Sx - Sy -> Dz Else: nop If DC = 0: Sx - Sy -> Dz Else: nop Sx - Sy -> Du MSW of Se * MSW of Sf -> Dg Sx - Sy - DC -> Dz MSW of Sx - 1 -> MSW of Dz, clear LSW of Dz MSW of Sy - 1 -> MSW of Dz, clear LSW of Dz If DC = 1: MSW of Sx - 1 -> MSW of DZ, clear LSW of Dz Else: nop If DC = 1: MSW of Sy - 1 -> MSW of DZ, clear LSW of Dz Else: nop If DC = 0: MSW of Sx - 1 -> MSW of DZ, clear LSW of Dz Else: nop If DC = 0: MSW of Sy - 1 -> MSW of DZ, clear LSW of Dz Else: nop MSW of Sy + 1 -> MSW of Dz, clear LSW of Dz MSW of Sy + 1 -> MSW of Dz, clear LSW of Dz If DC = 1: MSW of Sx + 1 -> MSW of Dz, clear LSW of Dz Else: nop If DC = 1: MSW of Sy + 1 -> MSW of Dz, clear LSW of Dz Else: nop If DC = 0: MSW of Sx + 1 -> MSW of Dz, clear LSW of Dz Else: nop If DC = 0: MSW of Sy + 1 -> MSW of Dz, clear LSW of Dz Else: nop Sx data MSB position -> MSW of Dz, clear LSW of Dz Sy data MSB position -> MSW of Dz, clear LSW of Dz If DC = 1: Sx data MSB position -> MSW of Dz, clear LSW of Dz Else: nop If DC = 1: Sy data MSB position -> MSW of Dz, clear LSW of Dz Else: nop If DC = 0: Sx data MSB position -> MSW of Dz, clear LSW of Dz Else: nop If DC = 0: Sy data MSB position -> MSW of Dz, clear LSW of Dz Else: nop Sx + 0x00008000 -> Dz, clear LSW of Dz Sy + 0x00008000 -> Dz, clear LSW of Dz Sx & Sy -> Dz, clear LSW of Dz If DC = 1: Sx & Sy -> Dz, clear LSW of Dz Else: nop If DC = 0: Sx & Sy -> Dz, clear LSW of Dz Else: nop Sx | Sy -> Dz, clear LSW of Dz If DC = 1: Sx | Sy -> Dz, clear LSW of Dz Else: nop If DC = 0: Sx | Sy -> Dz, clear LSW of Dz Else: nop Sx ^ Sy -> Dz, clear LSW of Dz If DC = 1: Sx ^ Sy -> Dz, clear LSW of Dz Else: nop If DC = 0: Sx ^ Sy -> Dz, clear LSW of Dz Else: nop MSW of Se * MSW of Sf -> Dg If Sy >= 0: Sx Dz If Sy > Sy -> Dz If DC = 1 & Sy >= 0: Sx Dz If DC = 1 & Sy > Sy -> Dz If DC = 0: nop If DC = 0 & Sy >= 0: Sx Dz If DC = 0 & Sy > Sy -> Dz If DC = 1: nop If imm >= 0: Dz Dz If imm > imm -> Dz If Sy >= 0: Sx Dz, clear LSW of Dz If Sy > Sy -> Dz, clear LSW of Dz If DC = 1 & Sy >= 0: Sx Dz, clear LSW of Dz If DC = 1 & Sy > Sy -> Dz, clear LSW of Dz If DC = 0: nop If DC = 0 & Sy >= 0: Sx Dz, clear LSW of Dz If DC = 0 & Sy > Sy -> Dz, clear LSW of Dz If DC = 1: nop If imm >= 0: Dz Dz, clear LSW of Dz If imm > imm, clear LSW of Dz Dz -> MACH Dz -> MACL If DC = 1: Dz -> MACH Else: nop If DC = 1: Dz -> MACL Else: nop If DC = 0: Dz -> MACH Else: nop If DC = 0: Dz -> MACL Else: nop MACH -> Dz MACL -> Dz If DC = 1: MACH -> Dz Else: nop If DC = 1: MACL -> Dz Else: nop If DC = 0: MACH -> Dz Else: nop If DC = 0: MACL -> Dz Else: nop	0100nnnn00100000 0100nnnn00100001 0100nnnnmmmm1101 0100nnnn00000000 0100nnnn00001000 0100nnnn00011000 0100nnnn00101000 0100nnnn00000001 0100nnnn00001001 0100nnnn00011001 0100nnnn00101001 10001011dddddddd 10001111dddddddd 10001001dddddddd 10001101dddddddd 1010dddddddddddd 0000mmmm00100011 1011dddddddddddd 0000mmmm00000011 0100mmmm00101011 0100mmmm00001011 0100mmmm01001011 10000011dddddddd 0000000000001011 0000000001101011 0000mmmm01111011 0000000000101000 0000000001001000 0000000000001000 0000nnnn11100011 0100mmmm11100101 0100mmmm00001110 0100mmmm00000111 0100mmmm01001010 0100mmmm00011110 0100mmmm00010111 0100mmmm00101110 0100mmmm00100111 0100mmmm01011110 0100mmmm01010111 0100mmmm01111110 0100mmmm01110111 0100mmmm01101110 0100mmmm01100111 0100mmmm00111010 0100mmmm00110110 0100mmmm00111110 0100mmmm00110111 0100mmmm01001110 0100mmmm01000111 0100mmmm11110110 0100mmmm11110110 0100mmmm1nnn1110 0100mmmm1nnn0111 10001110dddddddd 10001100dddddddd 0100mmmm00001010 0100mmmm00000110 0100mmmm00011010 0100mmmm00010110 0100mmmm00101010 0100mmmm00100110 0100mmmm01101010 0100mmmm01100110 0100mmmm01110110 0100mmmm01110110 0100mmmm10001010 0100nnnn10000110 0100mmmm10011010 0100nnnn10010110 0100mmmm10101010 0100nnnn10100110 0100mmmm10111010 0100nnnn10110110 0000000000111000 0000nnnn11000011 0000000000001001 0000nnnn10010011 0000nnnn10100011 0000nnnn10110011 0000nnnn10000011 0000nnnn11010011 0000000001011011 0000000000101011 0100mmmm00010100 10000010iiiiiiii 0000000000011000 0000000000011000 0000000000011011 0100nnnn11100001 0000nnnn00000010 0100nnnn00000011 0000nnnn01001010 0000nnnn00010010 0100nnnn00010011 0000nnnn00100010 0100nnnn00100011 0000nnnn01010010 0100nnnn01010011 0000nnnn01110010 0100nnnn01110011 0000nnnn01100010 0100nnnn01100011 0000nnnn00111010 0100nnnn00110010 0000nnnn00110010 0100nnnn00110011 0000nnnn01000010 0100nnnn01000011 0000nnnn11111010 0100nnnn11110010 0000nnnn1mmm0010 0100nnnn1mmm0011 0000nnnn00001010 0100nnnn00000010 0000nnnn00011010 0100nnnn00010010 0000nnnn00101010 0100nnnn00100010 0000nnnn01101010 0100nnnn01100010 0000nnnn01111010 0100nnnn01100010 0000nnnn10001010 0100nnnn10000010 0000nnnn10011010 0100nnnn10010010 0000nnnn10101010 0100nnnn10100010 0000nnnn10111010 0100nnnn10110010 0000000010101011 11000011iiiiiiii 1111nnnnmmmm1100 1111nnnnmmmm1000 1111nnnnmmmm1010 1111nnnnmmmm1001 1111nnnnmmmm1011 1111nnnnmmmm0110 1111nnnnmmmm0111 0011nnnnmmmm0001 0111dddddddddddd 0011nnnnmmmm0001 0011dddddddddddd 1111nnn0mmm01100 1111nnn1mmm01100 1111nnn0mmm11100 1111nnn1mmm11100 1111nnn0mmmm1000 1111nnn1mmmm1000 1111nnnnmmm01010 1111nnnnmmm11010 1111nnn0mmmm1001 1111nnn1mmmm1001 1111nnnnmmm01011 1111nnnnmmm11011 1111nnn0mmmm0110 1111nnn1mmmm0110 1111nnnnmmm00111 1111nnnnmmm10111 0011nnn0mmmm0001 0111dddddddddddd 0011nnnnmmm00001 0011dddddddddddd 1111nnnn10001101 1111nnnn10011101 1111mmmm00011101 1111nnnn00001101 1111nnnn01011101 1111nnnn01001101 1111nnnnmmmm0000 1111nnnnmmmm0001 1111nnnnmmmm0010 1111nnnnmmmm1110 1111nnnnmmmm0011 1111nnnn01101101 1111nnnnmmmm0100 1111nnnnmmmm0101 1111nnnn00101101 1111mmmm00111101 1111nnmm11101101 1111nn0111111101 1111nnnn01111101 1111nnn011111101 1111nnn001011101 1111nnn001001101 1111nnn0mmm00000 1111nnn0mmm00001 1111nnn0mmm00010 1111nnn0mmm00011 1111nnn001101101 1111nnn0mmm00100 1111nnn0mmm00101 1111nnn000101101 1111mmm000111101 1111mmm010111101 1111nnn010101101 0100mmmm01101010 0000nnnn01101010 0100mmmm01100110 0100nnnn01100010 0100mmmm01011010 0000nnnn01011010 0100mmmm01010110 0100nnnn01010010 1111101111111101 1111001111111101 1111011111111101 1111000*0*0*00** 111100A*D*0*01** 111100A*D*0*10** 111100A*D*0*11** 111100A*D*1*01** 111100A*D*1*10** 111100A*D*1*11** 111100*0*0*0**00 111100*A*D*0**01 111100*A*D*0**10 111100*A*D*0**11 111100*A*D*1**01 111100*A*D*1**10 111100*A*D*1**11 111101AADDDD0000 111101AADDDD0100 111101AADDDD1000 111101AADDDD1100 111101AADDDD0001 111101AADDDD0101 111101AADDDD1001 111101AADDDD1101 111101AADDDD0010 111101AADDDD0110 111101AADDDD1010 111101AADDDD1110 111101AADDDD0011 111101AADDDD0111 111101AADDDD1011 111101AADDDD1111 111110********** 10001000xx00zzzz 111110********** 1010100000yyzzzz 111110********** 10110001xxyyzzzz 111110********** 10110010xxyyzzzz 111110********** 10110011xxyyzzzz 111110********** 0111eeffxxyygguu 111110********** 10110000xxyyzzzz 111110********** 100011010000zzzz 111110********** 100011100000zzzz 111110********** 100011110000zzzz 111110********** 10000100xxyy0000 111110********** 11011001xx00zzzz 111110********** 1111100100yyzzzz 111110********** 11011010xx00zzzz 111110********** 1111101000yyzzzz 111110********** 11011011xx00zzzz 111110********** 1111101100yyzzzz 111110********** 11001001xx00zzzz 111110********** 1110100100yyzzzz 111110********** 11001010xx00zzzz 111110********** 1110101000yyzzzz 111110********** 11001011xx00zzzz 111110********** 1110101100yyzzzz 111110********** 10100001xxyyzzzz 111110********** 10100010xxyyzzzz 111110********** 10100011xxyyzzzz 111110********** 0110eeffxxyygguu 111110********** 10100000xxyyzzzz 111110********** 10001001xx00zzzz 111110********** 1010100100yyzzzz 111110********** 10001010xx00zzzz 111110********** 1010101000yyzzzz 111110********** 10001011xx00zzzz 111110********** 1010101100yyzzzz 111110********** 10011001xx00zzzz 111110********** 1011100100yyzzzz 111110********** 10011010xx00zzzz 111110********** 1011101000yyzzzz 111110********** 10011011xx00zzzz 111110********** 1011101100yyzzzz 111110********** 10011101xx00zzzz 111110********** 1011110100yyzzzz 111110********** 10011110xx00zzzz 111110********** 1011111000yyzzzz 111110********** 10011111xx00zzzz 111110********** 1011111100yyzzzz 111110********** 10011000xx00zzzz 111110********** 1011100000yyzzzz 111110********** 10010101xxyyzzzz 111110********** 10010110xxyyzzzz 111110********** 10010111xxyyzzzz 111110********** 10110101xxyyzzzz 111110********** 10110110xxyyzzzz 111110********** 10110111xxyyzzzz 111110********** 10100101xxyyzzzz 111110********** 10100110xxyyzzzz 111110********** 10100111xxyyzzzz 111110********** 0100eeff0000gg00 111110********** 10010001xxyyzzzz 111110********** 10010010xxyyzzzz 111110********** 10010011xxyyzzzz 111110********** 00000iiiiiiizzzz 111110********** 10000001xxyyzzzz 111110********** 10000010xxyyzzzz 111110********** 10000011xxyyzzzz 111110********** 00010iiiiiiizzzz 111110********** 111011010000zzzz 111110********** 111111010000zzzz 111110********** 111011100000zzzz 111110********** 111111100000zzzz 111110********** 111011110000zzzz 111110********** 111111110000zzzz 111110********** 110011010000zzzz 111110********** 110111010000zzzz 111110********** 110011100000zzzz 111110********** 110111100000zzzz 111110********** 110011110000zzzz 111110********** 110111110000zzzz	MSB LSB MSB LSB 0 LSB LSB 1 Result Result Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update	
shar Rn	MSB >> Rn >> T	0100nnnn00100001	LSB	
shld Rm,Rn	If Rm >= 0: Rn Rn If Rm > |Rm| -> [0 -> Rn]	0100nnnnmmmm1101		
shll Rn shll2 Rn shll8 Rn shll16 Rn shlr Rn shlr2 Rn shlr8 Rn shlr16 Rn bf label bf/s label bt label bt/s label bra label braf Rm bsr label bsrf Rm jmp @Rm jsr @Rm jsr/n @Rm jsr/n @@(disp8,TBR) rts rts/n rtv/n Rm clrmac clrs clrt icbi @Rn ldbank @Rm,R0 ldc Rm,SR ldc.l @Rm+,SR ldc Rm,TBR ldc Rm,GBR ldc.l @Rm+,GBR ldc Rm,VBR ldc.l @Rm+,VBR ldc Rm,MOD ldc.l @Rm+,MOD ldc Rm,RE ldc.l @Rm+,RE ldc Rm,RS ldc.l @Rm+,RS ldc Rm,SGR ldc.l @Rm+,SGR ldc Rm,SSR ldc.l @Rm+,SSR ldc Rm,SPC ldc.l @Rm+,SPC ldc Rm,DBR ldc.l @Rm+,DBR ldc Rm,Rn_BANK ldc.l @Rm+,Rn_BANK ldre @(disp,PC) ldrs @(disp,PC) lds Rm,MACH lds.l @Rm+,MACH lds Rm,MACL lds.l @Rm+,MACL lds Rm,PR lds.l @Rm+,PR lds Rm,DSR lds.l @Rm+,DSR lds Rm,A0 lds.l @Rm+,A0 lds Rm,X0 lds.l @Rm+,X0 lds Rm,X1 lds.l @Rm+,X1 lds Rm,Y0 lds.l @Rm+,Y0 lds Rm,Y1 lds.l @Rm+,Y1 ldtbl movca.l R0,@Rn nop ocbi @Rn ocbp @Rn ocbwb @Rn pref @Rn prefi @Rn resbank rte setrc Rn setrc #imm sets sett sleep stbank R0,@Rn stc SR,Rn stc.l SR,@-Rn stc TBR,Rn stc GBR,Rn stc.l GBR,@-Rn stc VBR,Rn stc.l VBR,@-Rn stc MOD,Rn stc.l MOD,@-Rn stc RE,Rn stc.l RE,@-Rn stc RS,Rn stc.l RS,@-Rn stc SGR,Rn stc.l SGR,@-Rn stc SSR,Rn stc.l SSR,@-Rn stc SPC,Rn stc.l SPC,@-Rn stc DBR,Rn stc.l DBR,@-Rn stc Rm_BANK,Rn stc.l Rm_BANK,@-Rn sts MACH,Rn sts.l MACH,@-Rn sts MACL,Rn sts.l MACL,@-Rn sts PR,Rn sts.l PR,@-Rn sts DSR,Rn sts.l DSR,@-Rn sts A0,Rn sts.l A0,@-Rn sts X0,Rn sts.l X0,@-Rn sts X1,Rn sts.l X1,@-Rn sts Y0,Rn sts.l Y0,@-Rn sts Y1,Rn sts.l Y1,@-Rn synco trapa #imm fmov FRm,FRn fmov.s @Rm,FRn fmov.s FRm,@Rn fmov.s @Rm+,FRn fmov.s FRm,@-Rn fmov.s @(R0,Rm),FRn fmov.s FRm,@(R0,Rn) fmov.s @(disp12,Rm),FRn fmov.s FRm,@(disp12,Rn) fmov DRm,DRn fmov DRm,XDn fmov XDm,DRn fmov XDm,XDn fmov.d @Rm,DRn fmov.d @Rm,XDn fmov.d DRm,@Rn fmov.d XDm,@Rn fmov.d @Rm+,DRn fmov.d @Rm+,XDn fmov.d DRm,@-Rn fmov.d XDm,@-Rn fmov.d @(R0,Rm),DRn fmov.d @(R0,Rm),XDn fmov.d DRm,@(R0,Rn) fmov.d XDm,@(R0,Rn) fmov.d @(disp12,Rm),DRn fmov.d DRm,@(disp12,Rn) fldi0 FRn fldi1 FRn flds FRm,FPUL fsts FPUL,FRn fabs FRn fneg FRn fadd FRm,FRn fsub FRm,FRn fmul FRm,FRn fmac FR0,FRm,FRn fdiv FRm,FRn fsqrt FRn fcmp/eq FRm,FRn fcmp/gt FRm,FRn float FPUL,FRn ftrc FRm,FPUL fipr FVm,FVn ftrv XMTRX,FVn fsrra FRn fsca FPUL,DRn fabs DRn fneg DRn fadd DRm,DRn fsub DRm,DRn fmul DRm,DRn fdiv DRm,DRn fsqrt DRn fcmp/eq DRm,DRn fcmp/gt DRm,DRn float FPUL,DRn ftrc DRm,FPUL fcnvds DRm,FPUL fcnvsd FPUL,DRn lds Rm,FPSCR sts FPSCR,Rn lds.l @Rm+,FPSCR sts.l FPSCR,@-Rn lds Rm,FPUL sts FPUL,Rn lds.l @Rm+,FPUL sts.l FPUL,@-Rn frchg fschg fpchg nopx movx.w @Ax,Dx movx.w @Ax+,Dx movx.w @Ax+Ix,Dx movx.w Da,@Ax movx.w Da,@Ax+ movx.w Da,@Ax+Ix nopy movy.w @Ay,Dy movy.w @Ay+,Dy movy.w @Ay+Iy,Dy movy.w Da,@Ay movy.w Da,@Ay+ movy.w Da,@Ay+Iy movs.w @-As,Ds movs.w @As,Ds movs.w @As+,Ds movs.w @As+Ix,Ds movs.w Ds,@-As movs.w Ds,@As movs.w Ds,@As+ movs.w Ds,@As+Is movs.l @-As,Ds movs.l @As,Ds movs.l @As+,Ds movs.l @As+Is,Ds movs.l Ds,@-As movs.l Ds,@As movs.l Ds,@As+ movs.l Ds,@As+Is pabs Sx,Dz pabs Sy,Dz padd Sx,Sy,Dz dct padd Sx,Sy,Dz dcf padd Sx,Sy,Dz padd Sx,Sy,Du pmuls Se,Sf,Dg paddc Sx,Sy,Dz pclr Dz dct pclr Dz dcf pclr Dz pcmp Sx,Sy pcopy Sx,Dz pcopy Sy,Dz dct pcopy Sx,Dz dct pcopy Sy,Dz dcf pcopy Sx,Dz dcf pcopy Sy,Dz pneg Sx,Dz pneg Sy,Dz dct pneg Sx,Dz dct pneg Sy,Dz dcf pneg Sx,Dz dcf pneg Sy,Dz psub Sx,Sy,Dz dct psub Sx,Sy,Dz dcf psub Sx,Sy,Dz psub Sx,Sy,Du pmuls Se,Sf,Dg psubc Sx,Sy,Dz pdec Sx,Dz pdec Sy,Dz dct pdec Sx,Dz dct pdec Sy,Dz dcf pdec Sx,Dz dcf pdec Sy,Dz pinc Sx,Dz pinc Sy,Dz dct pinc Sx,Dz dct pinc Sy,Dz dcf pinc Sx,Dz dcf pinc Sy,Dz pdmsb Sx,Dz pdmsb Sy,Dz dct pdmsb Sx,Dz dct pdmsb Sy,Dz dcf pdmsb Sx,Dz dcf pdmsb Sy,Dz prnd Sx,Dz prnd Sy,Dz pand Sx,Sy,Dz dct pand Sx,Sy,Dz dcf pand Sx,Sy,Dz por Sx,Sy,Dz dct por Sx,Sy,Dz dcf por Sx,Sy,Dz pxor Sx,Sy,Dz dct pxor Sx,Sy,Dz dcf pxor Sx,Sy,Dz pmuls Se,Sf,Dg psha Sx,Sy,Dz dct psha Sx,Sy,Dz dcf psha Sx,Sy,Dz psha #imm,Dz pshl Sx,Sy,Dz dct pshl Sx,Sy,Dz dcf pshl Sx,Sy,Dz pshl #imm,Dz plds Dz,MACH plds Dz,MACL dct plds Dz,MACH dct plds Dz,MACL dcf plds Dz,MACH dcf plds Dz,MACL psts MACH,Dz psts MACL,Dz dct psts MACH,Dz dct psts MACL,Dz dcf psts MACH,Dz dcf psts MACL,Dz	T 0100nnnn00000000 MSB EX EX 1 1 1 1 1 1 1 1 1 1 1 1 Description Logically shifts the contents of general register Rn one bit to the left and stores the result in Rn. The bit shifted out of the operand is transferred to the T bit. Note Effectively, the operation performed is the same as the SHAL instruction. Operation void SHLL (int n) { if ((R[n] & 0x80000000) == 0) T = 0; else T = 1; R[n] Rn Rn Rn Rn Rn Rn 0 >> Rn >> T Rn >> 2 -> [0 -> Rn] Rn >> 8 -> [0 -> Rn] Rn >> 16 -> [0 -> Rn] If T = 0: disp*2 + PC + 4 -> PC Else: nop If T = 0: disp*2 + PC + 4 -> PC Else: nop (Delayed branch) If T = 1: disp*2 + PC + 4 -> PC Else: nop If T = 1: disp*2 + PC + 4 -> PC Else: nop (Delayed branch) disp*2 + PC + 4 -> PC (Delayed branch) Rm + PC + 4 -> PC (Delayed branch) PC + 4 -> PR, disp*2 + PC + 4 -> PC (Delayed branch) PC + 4 -> PR, Rm + PC + 4 -> PC (Delayed branch) Rm -> PC (Delayed branch) PC + 4 -> PR, Rm -> PC (Delayed branch) PC + 2 -> PR, Rm -> PC PC + 2 -> PR, (disp*4 + TBR) -> PC PR -> PC Delayed branch PR -> PC Rm -> R0, PR -> PC 0 -> MACH, 0 -> MACL 0 -> S 0 -> T Invalidate instruction cache block indicated by logical address (Specified register bank entry) -> R0 Rm -> SR (Rm) -> SR, Rm+4 -> Rm Rm -> TBR Rm -> GBR (Rm) -> GBR, Rm+4 -> Rm Rm -> VBR (Rm) -> VBR, Rm+4 -> Rm Rm -> MOD (Rm) -> MOD, Rm+4 -> Rm Rm -> RE (Rm) -> RE, Rm+4 -> Rm Rm -> RS (Rm) -> RS, Rm+4 -> Rm Rm -> SGR (Rm) -> SGR, Rm+4 -> Rm Rm -> SSR (Rm) -> SSR, Rm+4 -> Rm Rm -> SPC (Rm) -> SPC, Rm+4 -> Rm Rm -> DBR (Rm) -> DBR, Rm+4 -> Rm Rm -> Rn_BANK (n = 0-7) (Rm) -> Rn_BANK, Rm+4 -> Rm disp*2 + PC -> RE disp*2 + PC -> RS Rm -> MACH (Rm) -> MACH, Rm+4 -> Rm Rm -> MACL (Rm) -> MACL, Rm+4 -> Rm Rm -> PR (Rm) -> PR, Rm+4 -> Rm Rm -> DSR (Rm) -> DSR, Rm+4 -> Rm Rm -> A0 (Rm) -> A0, Rm+4 -> Rm Rm -> X0 (Rm) -> X0, Rm+4 -> Rm Rm -> X1 (Rm) -> X1, Rm+4 -> Rm Rm -> Y0 (Rm) -> Y0, Rm+4 -> Rm Rm -> Y1 (Rm) -> Y1, Rm+4 -> Rm PTEH/PTEL -> TLB R0 -> (Rn) (without fetching cache block) No operation Invalidate operand cache block Write back and invalidate operand cache block Write back operand cache block (Rn) -> operand cache Reads 32-byte instruction block into instruction cache Bank -> R0 to R14, GBR, MACH, MACL, PR Delayed branch SH1*,SH2*: stack area -> PC/SR SH3*,SH4*: SSR/SPC -> SR/PC Rn[11:0] -> RC (SR[27:16]) imm -> RC (SR[23:16]), 0 -> SR[27:24] 1 -> T 1 -> T Sleep or standby R0 -> (specified register bank entry) SR -> Rn Rn-4 -> Rn, SR -> (Rn) TBR -> Rn GBR -> Rn Rn-4 -> Rn, GBR -> (Rn) VBR -> Rn Rn-4 -> Rn, VBR -> (Rn) MOD -> Rn Rn-4 -> Rn, MOD -> (Rn) RE -> Rn Rn-4 -> Rn, RE -> (Rn) RS -> Rn Rn-4 -> Rn, RS -> (Rn) SGR -> Rn Rn-4 -> Rn, SGR -> (Rn) SSR -> Rn Rn-4 -> Rn, SSR -> (Rn) SPC -> Rn Rn-4 -> Rn, SPC -> (Rn) DBR -> Rn Rn-4 -> Rn, DBR -> (Rn) Rm_BANK -> Rn (m = 0-7) Rn-4 -> Rn, Rm_BANK -> (Rn) (m = 0-7) MACH -> Rn Rn-4 -> Rn, MACH -> (Rn) MACL -> Rn Rn-4 -> Rn, MACL -> (Rn) PR -> Rn Rn-4 -> Rn, PR -> (Rn) DSR -> Rn Rn-4 -> Rn, DSR -> (Rn) A0 -> Rn Rn-4 -> Rn, A0 -> (Rn) X0 -> Rn Rn-4 -> Rn, X0 -> (Rn) X1 -> Rn Rn-4 -> Rn, X1 -> (Rn) Y0 -> Rn Rn-4 -> Rn, Y0 -> (Rn) Y1 -> Rn Rn-4 -> Rn, Y1 -> (Rn) Prevents the next instruction from being issued until instructions issued before this instruction has been completed. SH1*,SH2*: PC/SR -> stack area, (imm*4 + VBR) -> PC SH3*,SH4*: PC/SR -> SPC/SSR, imm*4 -> TRA, 0x160 -> EXPEVT, VBR + 0x0100 -> PC FRm -> FRn (Rm) -> FRn FRm -> (Rn) (Rm) -> FRn, Rm+4 -> Rm Rn-4 -> Rn, FRm -> (Rn) (R0 + Rm) -> FRn FRm -> (R0 + Rn) (disp*4 + Rm) -> FRn FRm -> (disp*4 + Rn) DRm -> DRn DRm -> XDn XDm -> DRn XDm -> XDn (Rm) -> DRn (Rm) -> XDn DRm -> (Rn) XDm -> (Rn) (Rm) -> DRn, Rm + 8 -> Rm (Rm) -> XDn, Rm+8 -> Rm Rn-8 -> Rn, DRm -> (Rn) Rn-8 -> Rn, (Rn) -> XDm (R0 + Rm) -> DRn (R0 + Rm) -> XDn DRm -> (R0 + Rn) XDm -> (R0 + Rn) (disp*8 + Rm) -> DRn DRm -> (disp*8 + Rn) 0x00000000 -> FRn 0x3F800000 -> FRn FRm -> FPUL FPUL -> FRn FRn & 0x7FFFFFFF -> FRn FRn ^ 0x80000000 -> FRn FRn + FRm -> FRn FRn - FRm -> FRn FRn * FRm -> FRn FR0 * FRm + FRn -> FRn FRn / FRm -> FRn sqrt (FRn) -> FRn If FRn = FRm: 1 -> T Else: 0 -> T If FRn > FRm: 1 -> T Else: 0 -> T (float)FPUL -> FRn (long)FRm -> FPUL inner_product (FVm, FVn) -> FR[n+3] transform_vector (XMTRX, FVn) -> FVn 1.0 / sqrt (FRn) -> FRn sin (FPUL) -> FRn cos (FPUL) -> FR[n+1] DRn & 0x7FFFFFFFFFFFFFFF -> DRn DRn ^ 0x8000000000000000 -> DRn DRn + DRm -> DRn DRn - DRm -> DRn DRn * DRm -> DRn DRn / DRm -> DRn sqrt (DRn) -> DRn If DRn = DRm: 1 -> T Else: 0 -> T If DRn > DRm: 1 -> T Else: 0 -> T (double)FPUL -> DRn (long)DRm -> FPUL double_to_float (DRm) -> FPUL float_to_double (FPUL) -> DRn Rm -> FPSCR FPSCR -> Rn (Rm) -> FPSCR, Rm+4 -> Rm Rn-4 -> Rn, FPSCR -> (Rn) Rm -> FPUL FPUL -> Rn (Rm) -> FPUL, Rm+4 -> Rm Rn-4 -> Rn, FPUL -> (Rn) If FPSCR.PR = 0: ~FPSCR.FR -> FPSCR.FR Else: Undefined Operation If FPSCR.PR = 0: ~FPSCR.SZ -> FPSCR.SZ Else: Undefined Operation ~FPSCR.PR -> FPSCR.PR No operation (Ax) -> MSW of Dx, 0 -> LSW of Dx (Ax) -> MSW of Dx, 0 -> LSW of Dx, Ax+2 -> Ax (Ax) -> MSW of Dx, 0 -> LSW of Dx, Ax+Ix -> Ax MSW of Da -> (Ax) MSW of Da -> (Ax), Ax+2 -> Ax MSW of Da -> (Ax), Ax+Ix -> Ax No Operation (Ay) -> MSW of Dy, 0 -> LSW of Dy (Ay) -> MSW of Dy, 0 -> LSW of Dy, Ay+2 -> Ay (Ay) -> MSW of Dy, 0 -> LSW of Dy, Ay+Iy -> Ay MSW of Da -> (Ay) MSW of Da -> (Ay), Ay+2 -> Ay MSW of Da -> (Ay), Ay+Iy -> Ay As-2 -> As, (As) -> MSW of Ds, 0 -> LSW of Ds (As) -> MSW of Ds, 0 -> LSW of Ds (As) -> MSW of Ds, 0 -> LSW of Ds, As+2 -> As (As) -> MSW of Ds, 0 -> LSW of DS, As+Ix -> As As-2 -> As, MSW of Ds -> (As) MSW of Ds -> (As) MSW of Ds -> (As), As+2 -> As MSW of DS -> (As), As+Is -> As As-4 -> As, (As) -> Ds (As) -> Ds (As) -> Ds, As+4 -> As (As) -> Ds, As+Is -> As As-4 -> As, Ds -> (As) Ds -> (As) Ds -> (As), As+4 -> As Ds -> (As), As+Is -> As If Sx >= 0: Sx -> Dz If Sx Dz If Sy >= 0: Sy -> Dz If Sy Dz Sx + Sy -> Dz If DC = 1: Sx + Sy -> Dz Else: nop If DC = 0: Sx + Sy -> Dz Else: nop Sx + Sy -> Du MSW of Se * MSW of Sf -> Dg Sx + Sy + DC -> Dz 0x00000000 -> Dz If DC = 1: 0x00000000 -> Dz Else: nop If DC = 0: 0x00000000 -> Dz Else: nop Sx - Sy Sx -> Dz Sy -> Dz If DC = 1: Sx -> Dz Else: nop If DC = 1: Sy -> Dz Else: nop If DC = 0: Sx -> Dz Else: nop If DC = 0: Sy -> Dz Else: nop 0 - Sx -> Dz 0 - Sy -> Dz If DC = 1: 0 - Sx -> Dz Else: nop If DC = 1: 0 - Sy -> Dz Else: nop If DC = 0: 0 - Sx -> Dz Else: nop If DC = 0: 0 - Sy -> Dz Else: nop Sx - Sy -> Dz If DC = 1: Sx - Sy -> Dz Else: nop If DC = 0: Sx - Sy -> Dz Else: nop Sx - Sy -> Du MSW of Se * MSW of Sf -> Dg Sx - Sy - DC -> Dz MSW of Sx - 1 -> MSW of Dz, clear LSW of Dz MSW of Sy - 1 -> MSW of Dz, clear LSW of Dz If DC = 1: MSW of Sx - 1 -> MSW of DZ, clear LSW of Dz Else: nop If DC = 1: MSW of Sy - 1 -> MSW of DZ, clear LSW of Dz Else: nop If DC = 0: MSW of Sx - 1 -> MSW of DZ, clear LSW of Dz Else: nop If DC = 0: MSW of Sy - 1 -> MSW of DZ, clear LSW of Dz Else: nop MSW of Sy + 1 -> MSW of Dz, clear LSW of Dz MSW of Sy + 1 -> MSW of Dz, clear LSW of Dz If DC = 1: MSW of Sx + 1 -> MSW of Dz, clear LSW of Dz Else: nop If DC = 1: MSW of Sy + 1 -> MSW of Dz, clear LSW of Dz Else: nop If DC = 0: MSW of Sx + 1 -> MSW of Dz, clear LSW of Dz Else: nop If DC = 0: MSW of Sy + 1 -> MSW of Dz, clear LSW of Dz Else: nop Sx data MSB position -> MSW of Dz, clear LSW of Dz Sy data MSB position -> MSW of Dz, clear LSW of Dz If DC = 1: Sx data MSB position -> MSW of Dz, clear LSW of Dz Else: nop If DC = 1: Sy data MSB position -> MSW of Dz, clear LSW of Dz Else: nop If DC = 0: Sx data MSB position -> MSW of Dz, clear LSW of Dz Else: nop If DC = 0: Sy data MSB position -> MSW of Dz, clear LSW of Dz Else: nop Sx + 0x00008000 -> Dz, clear LSW of Dz Sy + 0x00008000 -> Dz, clear LSW of Dz Sx & Sy -> Dz, clear LSW of Dz If DC = 1: Sx & Sy -> Dz, clear LSW of Dz Else: nop If DC = 0: Sx & Sy -> Dz, clear LSW of Dz Else: nop Sx | Sy -> Dz, clear LSW of Dz If DC = 1: Sx | Sy -> Dz, clear LSW of Dz Else: nop If DC = 0: Sx | Sy -> Dz, clear LSW of Dz Else: nop Sx ^ Sy -> Dz, clear LSW of Dz If DC = 1: Sx ^ Sy -> Dz, clear LSW of Dz Else: nop If DC = 0: Sx ^ Sy -> Dz, clear LSW of Dz Else: nop MSW of Se * MSW of Sf -> Dg If Sy >= 0: Sx Dz If Sy > Sy -> Dz If DC = 1 & Sy >= 0: Sx Dz If DC = 1 & Sy > Sy -> Dz If DC = 0: nop If DC = 0 & Sy >= 0: Sx Dz If DC = 0 & Sy > Sy -> Dz If DC = 1: nop If imm >= 0: Dz Dz If imm > imm -> Dz If Sy >= 0: Sx Dz, clear LSW of Dz If Sy > Sy -> Dz, clear LSW of Dz If DC = 1 & Sy >= 0: Sx Dz, clear LSW of Dz If DC = 1 & Sy > Sy -> Dz, clear LSW of Dz If DC = 0: nop If DC = 0 & Sy >= 0: Sx Dz, clear LSW of Dz If DC = 0 & Sy > Sy -> Dz, clear LSW of Dz If DC = 1: nop If imm >= 0: Dz Dz, clear LSW of Dz If imm > imm, clear LSW of Dz Dz -> MACH Dz -> MACL If DC = 1: Dz -> MACH Else: nop If DC = 1: Dz -> MACL Else: nop If DC = 0: Dz -> MACH Else: nop If DC = 0: Dz -> MACL Else: nop MACH -> Dz MACL -> Dz If DC = 1: MACH -> Dz Else: nop If DC = 1: MACL -> Dz Else: nop If DC = 0: MACH -> Dz Else: nop If DC = 0: MACL -> Dz Else: nop	0100nnnn00000000 0100nnnn00001000 0100nnnn00011000 0100nnnn00101000 0100nnnn00000001 0100nnnn00001001 0100nnnn00011001 0100nnnn00101001 10001011dddddddd 10001111dddddddd 10001001dddddddd 10001101dddddddd 1010dddddddddddd 0000mmmm00100011 1011dddddddddddd 0000mmmm00000011 0100mmmm00101011 0100mmmm00001011 0100mmmm01001011 10000011dddddddd 0000000000001011 0000000001101011 0000mmmm01111011 0000000000101000 0000000001001000 0000000000001000 0000nnnn11100011 0100mmmm11100101 0100mmmm00001110 0100mmmm00000111 0100mmmm01001010 0100mmmm00011110 0100mmmm00010111 0100mmmm00101110 0100mmmm00100111 0100mmmm01011110 0100mmmm01010111 0100mmmm01111110 0100mmmm01110111 0100mmmm01101110 0100mmmm01100111 0100mmmm00111010 0100mmmm00110110 0100mmmm00111110 0100mmmm00110111 0100mmmm01001110 0100mmmm01000111 0100mmmm11110110 0100mmmm11110110 0100mmmm1nnn1110 0100mmmm1nnn0111 10001110dddddddd 10001100dddddddd 0100mmmm00001010 0100mmmm00000110 0100mmmm00011010 0100mmmm00010110 0100mmmm00101010 0100mmmm00100110 0100mmmm01101010 0100mmmm01100110 0100mmmm01110110 0100mmmm01110110 0100mmmm10001010 0100nnnn10000110 0100mmmm10011010 0100nnnn10010110 0100mmmm10101010 0100nnnn10100110 0100mmmm10111010 0100nnnn10110110 0000000000111000 0000nnnn11000011 0000000000001001 0000nnnn10010011 0000nnnn10100011 0000nnnn10110011 0000nnnn10000011 0000nnnn11010011 0000000001011011 0000000000101011 0100mmmm00010100 10000010iiiiiiii 0000000000011000 0000000000011000 0000000000011011 0100nnnn11100001 0000nnnn00000010 0100nnnn00000011 0000nnnn01001010 0000nnnn00010010 0100nnnn00010011 0000nnnn00100010 0100nnnn00100011 0000nnnn01010010 0100nnnn01010011 0000nnnn01110010 0100nnnn01110011 0000nnnn01100010 0100nnnn01100011 0000nnnn00111010 0100nnnn00110010 0000nnnn00110010 0100nnnn00110011 0000nnnn01000010 0100nnnn01000011 0000nnnn11111010 0100nnnn11110010 0000nnnn1mmm0010 0100nnnn1mmm0011 0000nnnn00001010 0100nnnn00000010 0000nnnn00011010 0100nnnn00010010 0000nnnn00101010 0100nnnn00100010 0000nnnn01101010 0100nnnn01100010 0000nnnn01111010 0100nnnn01100010 0000nnnn10001010 0100nnnn10000010 0000nnnn10011010 0100nnnn10010010 0000nnnn10101010 0100nnnn10100010 0000nnnn10111010 0100nnnn10110010 0000000010101011 11000011iiiiiiii 1111nnnnmmmm1100 1111nnnnmmmm1000 1111nnnnmmmm1010 1111nnnnmmmm1001 1111nnnnmmmm1011 1111nnnnmmmm0110 1111nnnnmmmm0111 0011nnnnmmmm0001 0111dddddddddddd 0011nnnnmmmm0001 0011dddddddddddd 1111nnn0mmm01100 1111nnn1mmm01100 1111nnn0mmm11100 1111nnn1mmm11100 1111nnn0mmmm1000 1111nnn1mmmm1000 1111nnnnmmm01010 1111nnnnmmm11010 1111nnn0mmmm1001 1111nnn1mmmm1001 1111nnnnmmm01011 1111nnnnmmm11011 1111nnn0mmmm0110 1111nnn1mmmm0110 1111nnnnmmm00111 1111nnnnmmm10111 0011nnn0mmmm0001 0111dddddddddddd 0011nnnnmmm00001 0011dddddddddddd 1111nnnn10001101 1111nnnn10011101 1111mmmm00011101 1111nnnn00001101 1111nnnn01011101 1111nnnn01001101 1111nnnnmmmm0000 1111nnnnmmmm0001 1111nnnnmmmm0010 1111nnnnmmmm1110 1111nnnnmmmm0011 1111nnnn01101101 1111nnnnmmmm0100 1111nnnnmmmm0101 1111nnnn00101101 1111mmmm00111101 1111nnmm11101101 1111nn0111111101 1111nnnn01111101 1111nnn011111101 1111nnn001011101 1111nnn001001101 1111nnn0mmm00000 1111nnn0mmm00001 1111nnn0mmm00010 1111nnn0mmm00011 1111nnn001101101 1111nnn0mmm00100 1111nnn0mmm00101 1111nnn000101101 1111mmm000111101 1111mmm010111101 1111nnn010101101 0100mmmm01101010 0000nnnn01101010 0100mmmm01100110 0100nnnn01100010 0100mmmm01011010 0000nnnn01011010 0100mmmm01010110 0100nnnn01010010 1111101111111101 1111001111111101 1111011111111101 1111000*0*0*00** 111100A*D*0*01** 111100A*D*0*10** 111100A*D*0*11** 111100A*D*1*01** 111100A*D*1*10** 111100A*D*1*11** 111100*0*0*0**00 111100*A*D*0**01 111100*A*D*0**10 111100*A*D*0**11 111100*A*D*1**01 111100*A*D*1**10 111100*A*D*1**11 111101AADDDD0000 111101AADDDD0100 111101AADDDD1000 111101AADDDD1100 111101AADDDD0001 111101AADDDD0101 111101AADDDD1001 111101AADDDD1101 111101AADDDD0010 111101AADDDD0110 111101AADDDD1010 111101AADDDD1110 111101AADDDD0011 111101AADDDD0111 111101AADDDD1011 111101AADDDD1111 111110********** 10001000xx00zzzz 111110********** 1010100000yyzzzz 111110********** 10110001xxyyzzzz 111110********** 10110010xxyyzzzz 111110********** 10110011xxyyzzzz 111110********** 0111eeffxxyygguu 111110********** 10110000xxyyzzzz 111110********** 100011010000zzzz 111110********** 100011100000zzzz 111110********** 100011110000zzzz 111110********** 10000100xxyy0000 111110********** 11011001xx00zzzz 111110********** 1111100100yyzzzz 111110********** 11011010xx00zzzz 111110********** 1111101000yyzzzz 111110********** 11011011xx00zzzz 111110********** 1111101100yyzzzz 111110********** 11001001xx00zzzz 111110********** 1110100100yyzzzz 111110********** 11001010xx00zzzz 111110********** 1110101000yyzzzz 111110********** 11001011xx00zzzz 111110********** 1110101100yyzzzz 111110********** 10100001xxyyzzzz 111110********** 10100010xxyyzzzz 111110********** 10100011xxyyzzzz 111110********** 0110eeffxxyygguu 111110********** 10100000xxyyzzzz 111110********** 10001001xx00zzzz 111110********** 1010100100yyzzzz 111110********** 10001010xx00zzzz 111110********** 1010101000yyzzzz 111110********** 10001011xx00zzzz 111110********** 1010101100yyzzzz 111110********** 10011001xx00zzzz 111110********** 1011100100yyzzzz 111110********** 10011010xx00zzzz 111110********** 1011101000yyzzzz 111110********** 10011011xx00zzzz 111110********** 1011101100yyzzzz 111110********** 10011101xx00zzzz 111110********** 1011110100yyzzzz 111110********** 10011110xx00zzzz 111110********** 1011111000yyzzzz 111110********** 10011111xx00zzzz 111110********** 1011111100yyzzzz 111110********** 10011000xx00zzzz 111110********** 1011100000yyzzzz 111110********** 10010101xxyyzzzz 111110********** 10010110xxyyzzzz 111110********** 10010111xxyyzzzz 111110********** 10110101xxyyzzzz 111110********** 10110110xxyyzzzz 111110********** 10110111xxyyzzzz 111110********** 10100101xxyyzzzz 111110********** 10100110xxyyzzzz 111110********** 10100111xxyyzzzz 111110********** 0100eeff0000gg00 111110********** 10010001xxyyzzzz 111110********** 10010010xxyyzzzz 111110********** 10010011xxyyzzzz 111110********** 00000iiiiiiizzzz 111110********** 10000001xxyyzzzz 111110********** 10000010xxyyzzzz 111110********** 10000011xxyyzzzz 111110********** 00010iiiiiiizzzz 111110********** 111011010000zzzz 111110********** 111111010000zzzz 111110********** 111011100000zzzz 111110********** 111111100000zzzz 111110********** 111011110000zzzz 111110********** 111111110000zzzz 111110********** 110011010000zzzz 111110********** 110111010000zzzz 111110********** 110011100000zzzz 111110********** 110111100000zzzz 111110********** 110011110000zzzz 111110********** 110111110000zzzz	MSB LSB 0 LSB LSB 1 Result Result Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update Update	
shll2 Rn	Rn Rn	0100nnnn00001000		
shll8 Rn	Rn Rn	0100nnnn00011000		
shll16 Rn	Rn Rn	0100nnnn00101000		
shlr Rn	0 >> Rn >> T	0100nnnn00000001	LSB	
shlr2 Rn	Rn >> 2 -> [0 -> Rn]	0100nnnn00001001		
shlr8 Rn	Rn >> 8 -> [0 -> Rn]	0100nnnn00011001		
shlr16 Rn	Rn >> 16 -> [0 -> Rn]	0100nnnn00101001		
bf label	If T = 0: disp*2 + PC + 4 -> PC Else: nop	10001011dddddddd		
bf/s label	If T = 0: disp*2 + PC + 4 -> PC Else: nop (Delayed branch)	10001111dddddddd		
bt label	If T = 1: disp*2 + PC + 4 -> PC Else: nop	10001001dddddddd		
bt/s label	If T = 1: disp*2 + PC + 4 -> PC Else: nop (Delayed branch)	10001101dddddddd		
bra label	disp*2 + PC + 4 -> PC (Delayed branch)	1010dddddddddddd		
braf Rm	Rm + PC + 4 -> PC (Delayed branch)	0000mmmm00100011		
bsr label	PC + 4 -> PR, disp*2 + PC + 4 -> PC (Delayed branch)	1011dddddddddddd		
bsrf Rm	PC + 4 -> PR, Rm + PC + 4 -> PC (Delayed branch)	0000mmmm00000011		
jmp @Rm	Rm -> PC (Delayed branch)	0100mmmm00101011		
jsr @Rm	PC + 4 -> PR, Rm -> PC (Delayed branch)	0100mmmm00001011		
rts	PR -> PC Delayed branch	0000000000001011		
clrmac	0 -> MACH, 0 -> MACL	0000000000101000		
clrs	0 -> S	0000000001001000		
clrt	0 -> T	0000000000001000	0	
icbi @Rn	Invalidate instruction cache block indicated by logical address	0000nnnn11100011		
ldc Rm,SR	Rm -> SR	0100mmmm00001110	LSB	
ldc.l @Rm+,SR	(Rm) -> SR, Rm+4 -> Rm	0100mmmm00000111	LSB	
ldc Rm,GBR	Rm -> GBR	0100mmmm00011110		
ldc.l @Rm+,GBR	(Rm) -> GBR, Rm+4 -> Rm	0100mmmm00010111		
ldc Rm,VBR	Rm -> VBR	0100mmmm00101110		
ldc.l @Rm+,VBR	(Rm) -> VBR, Rm+4 -> Rm	0100mmmm00100111		
ldc Rm,SGR	Rm -> SGR	0100mmmm00111010		
ldc.l @Rm+,SGR	(Rm) -> SGR, Rm+4 -> Rm	0100mmmm00110110		
ldc Rm,SSR	Rm -> SSR	0100mmmm00111110		
ldc.l @Rm+,SSR	(Rm) -> SSR, Rm+4 -> Rm	0100mmmm00110111		
ldc Rm,SPC	Rm -> SPC	0100mmmm01001110		
ldc.l @Rm+,SPC	(Rm) -> SPC, Rm+4 -> Rm	0100mmmm01000111		
ldc Rm,DBR	Rm -> DBR	0100mmmm11110110		
ldc.l @Rm+,DBR	(Rm) -> DBR, Rm+4 -> Rm	0100mmmm11110110		
ldc Rm,Rn_BANK	Rm -> Rn_BANK (n = 0-7)	0100mmmm1nnn1110		
ldc.l @Rm+,Rn_BANK	(Rm) -> Rn_BANK, Rm+4 -> Rm	0100mmmm1nnn0111		
lds Rm,MACH	Rm -> MACH	0100mmmm00001010		
lds.l @Rm+,MACH	(Rm) -> MACH, Rm+4 -> Rm	0100mmmm00000110		
lds Rm,MACL	Rm -> MACL	0100mmmm00011010		
lds.l @Rm+,MACL	(Rm) -> MACL, Rm+4 -> Rm	0100mmmm00010110		
lds Rm,PR	Rm -> PR	0100mmmm00101010		
lds.l @Rm+,PR	(Rm) -> PR, Rm+4 -> Rm	0100mmmm00100110		
ldtbl	PTEH/PTEL -> TLB	0000000000111000		
movca.l R0,@Rn	R0 -> (Rn) (without fetching cache block)	0000nnnn11000011		
nop	No operation	0000000000001001		
ocbi @Rn	Invalidate operand cache block	0000nnnn10010011		
ocbp @Rn	Write back and invalidate operand cache block	0000nnnn10100011		
ocbwb @Rn	Write back operand cache block	0000nnnn10110011		
pref @Rn	(Rn) -> operand cache	0000nnnn10000011		
prefi @Rn	Reads 32-byte instruction block into instruction cache	0000nnnn11010011		
rte	Delayed branch SH1*,SH2*: stack area -> PC/SR SH3*,SH4*: SSR/SPC -> SR/PC	0000000000101011		
sets	1 -> T	0000000000011000		
sett	1 -> T	0000000000011000	1	
sleep	Sleep or standby	0000000000011011		
stc SR,Rn	SR -> Rn	0000nnnn00000010		
stc.l SR,@-Rn	Rn-4 -> Rn, SR -> (Rn)	0100nnnn00000011		
stc GBR,Rn	GBR -> Rn	0000nnnn00010010		
stc.l GBR,@-Rn	Rn-4 -> Rn, GBR -> (Rn)	0100nnnn00010011		
stc VBR,Rn	VBR -> Rn	0000nnnn00100010		
stc.l VBR,@-Rn	Rn-4 -> Rn, VBR -> (Rn)	0100nnnn00100011		
stc SGR,Rn	SGR -> Rn	0000nnnn00111010		
stc.l SGR,@-Rn	Rn-4 -> Rn, SGR -> (Rn)	0100nnnn00110010		
stc SSR,Rn	SSR -> Rn	0000nnnn00110010		
stc.l SSR,@-Rn	Rn-4 -> Rn, SSR -> (Rn)	0100nnnn00110011		
stc SPC,Rn	SPC -> Rn	0000nnnn01000010		
stc.l SPC,@-Rn	Rn-4 -> Rn, SPC -> (Rn)	0100nnnn01000011		
stc DBR,Rn	DBR -> Rn	0000nnnn11111010		
stc.l DBR,@-Rn	Rn-4 -> Rn, DBR -> (Rn)	0100nnnn11110010		
stc Rm_BANK,Rn	Rm_BANK -> Rn (m = 0-7)	0000nnnn1mmm0010		
stc.l Rm_BANK,@-Rn	Rn-4 -> Rn, Rm_BANK -> (Rn) (m = 0-7)	0100nnnn1mmm0011		
sts MACH,Rn	MACH -> Rn	0000nnnn00001010		
sts.l MACH,@-Rn	Rn-4 -> Rn, MACH -> (Rn)	0100nnnn00000010		
sts MACL,Rn	MACL -> Rn	0000nnnn00011010		
sts.l MACL,@-Rn	Rn-4 -> Rn, MACL -> (Rn)	0100nnnn00010010		
sts PR,Rn	PR -> Rn	0000nnnn00101010		
sts.l PR,@-Rn	Rn-4 -> Rn, PR -> (Rn)	0100nnnn00100010		
synco	Prevents the next instruction from being issued until instructions issued before this instruction has been completed.	0000000010101011		
trapa #imm	SH1*,SH2*: PC/SR -> stack area, (imm*4 + VBR) -> PC SH3*,SH4*: PC/SR -> SPC/SSR, imm*4 -> TRA, 0x160 -> EXPEVT, VBR + 0x0100 -> PC	11000011iiiiiiii		
fmov FRm,FRn	FRm -> FRn	1111nnnnmmmm1100		
fmov.s @Rm,FRn	(Rm) -> FRn	1111nnnnmmmm1000		
fmov.s FRm,@Rn	FRm -> (Rn)	1111nnnnmmmm1010		
fmov.s @Rm+,FRn	(Rm) -> FRn, Rm+4 -> Rm	1111nnnnmmmm1001		
fmov.s FRm,@-Rn	Rn-4 -> Rn, FRm -> (Rn)	1111nnnnmmmm1011		
fmov.s @(R0,Rm),FRn	(R0 + Rm) -> FRn	1111nnnnmmmm0110		
fmov.s FRm,@(R0,Rn)	FRm -> (R0 + Rn)	1111nnnnmmmm0111		
fmov DRm,DRn	DRm -> DRn	1111nnn0mmm01100		
fmov DRm,XDn	DRm -> XDn	1111nnn1mmm01100		
fmov XDm,DRn	XDm -> DRn	1111nnn0mmm11100		
fmov XDm,XDn	XDm -> XDn	1111nnn1mmm11100		
fmov.d @Rm,DRn	(Rm) -> DRn	1111nnn0mmmm1000		
fmov.d @Rm,XDn	(Rm) -> XDn	1111nnn1mmmm1000		
fmov.d DRm,@Rn	DRm -> (Rn)	1111nnnnmmm01010		
fmov.d XDm,@Rn	XDm -> (Rn)	1111nnnnmmm11010		
fmov.d @Rm+,DRn	(Rm) -> DRn, Rm + 8 -> Rm	1111nnn0mmmm1001		
fmov.d @Rm+,XDn	(Rm) -> XDn, Rm+8 -> Rm	1111nnn1mmmm1001		
fmov.d DRm,@-Rn	Rn-8 -> Rn, DRm -> (Rn)	1111nnnnmmm01011		
fmov.d XDm,@-Rn	Rn-8 -> Rn, (Rn) -> XDm	1111nnnnmmm11011		
fmov.d @(R0,Rm),DRn	(R0 + Rm) -> DRn	1111nnn0mmmm0110		
fmov.d @(R0,Rm),XDn	(R0 + Rm) -> XDn	1111nnn1mmmm0110		
fmov.d DRm,@(R0,Rn)	DRm -> (R0 + Rn)	1111nnnnmmm00111		
fmov.d XDm,@(R0,Rn)	XDm -> (R0 + Rn)	1111nnnnmmm10111		
fldi0 FRn	0x00000000 -> FRn	1111nnnn10001101		
fldi1 FRn	0x3F800000 -> FRn	1111nnnn10011101		
flds FRm,FPUL	FRm -> FPUL	1111mmmm00011101		
fsts FPUL,FRn	FPUL -> FRn	1111nnnn00001101		
fabs FRn	FRn & 0x7FFFFFFF -> FRn	1111nnnn01011101		
fneg FRn	FRn ^ 0x80000000 -> FRn	1111nnnn01001101		
fadd FRm,FRn	FRn + FRm -> FRn	1111nnnnmmmm0000		
fsub FRm,FRn	FRn - FRm -> FRn	1111nnnnmmmm0001		
fmul FRm,FRn	FRn * FRm -> FRn	1111nnnnmmmm0010		
fmac FR0,FRm,FRn	FR0 * FRm + FRn -> FRn	1111nnnnmmmm1110		
fdiv FRm,FRn	FRn / FRm -> FRn	1111nnnnmmmm0011		
fsqrt FRn	sqrt (FRn) -> FRn	1111nnnn01101101		
fcmp/eq FRm,FRn	If FRn = FRm: 1 -> T Else: 0 -> T	1111nnnnmmmm0100	Result	
fcmp/gt FRm,FRn	If FRn > FRm: 1 -> T Else: 0 -> T	1111nnnnmmmm0101	Result	
float FPUL,FRn	(float)FPUL -> FRn	1111nnnn00101101		
ftrc FRm,FPUL	(long)FRm -> FPUL	1111mmmm00111101		
fipr FVm,FVn	inner_product (FVm, FVn) -> FR[n+3]	1111nnmm11101101		
ftrv XMTRX,FVn	transform_vector (XMTRX, FVn) -> FVn	1111nn0111111101		
fsrra FRn	1.0 / sqrt (FRn) -> FRn	1111nnnn01111101		
fsca FPUL,DRn	sin (FPUL) -> FRn cos (FPUL) -> FR[n+1]	1111nnn011111101		
fabs DRn	DRn & 0x7FFFFFFFFFFFFFFF -> DRn	1111nnn001011101		
fneg DRn	DRn ^ 0x8000000000000000 -> DRn	1111nnn001001101		
fadd DRm,DRn	DRn + DRm -> DRn	1111nnn0mmm00000		
fsub DRm,DRn	DRn - DRm -> DRn	1111nnn0mmm00001		
fmul DRm,DRn	DRn * DRm -> DRn	1111nnn0mmm00010		
fdiv DRm,DRn	DRn / DRm -> DRn	1111nnn0mmm00011		
fsqrt DRn	sqrt (DRn) -> DRn	1111nnn001101101		
fcmp/eq DRm,DRn	If DRn = DRm: 1 -> T Else: 0 -> T	1111nnn0mmm00100		
fcmp/gt DRm,DRn	If DRn > DRm: 1 -> T Else: 0 -> T	1111nnn0mmm00101		
float FPUL,DRn	(double)FPUL -> DRn	1111nnn000101101		
ftrc DRm,FPUL	(long)DRm -> FPUL	1111mmm000111101		
fcnvds DRm,FPUL	double_to_float (DRm) -> FPUL	1111mmm010111101		
fcnvsd FPUL,DRn	float_to_double (FPUL) -> DRn	1111nnn010101101		
lds Rm,FPSCR	Rm -> FPSCR	0100mmmm01101010		
sts FPSCR,Rn	FPSCR -> Rn	0000nnnn01101010		
lds.l @Rm+,FPSCR	(Rm) -> FPSCR, Rm+4 -> Rm	0100mmmm01100110		
sts.l FPSCR,@-Rn	Rn-4 -> Rn, FPSCR -> (Rn)	0100nnnn01100010		
lds Rm,FPUL	Rm -> FPUL	0100mmmm01011010		
sts FPUL,Rn	FPUL -> Rn	0000nnnn01011010		
lds.l @Rm+,FPUL	(Rm) -> FPUL, Rm+4 -> Rm	0100mmmm01010110		
sts.l FPUL,@-Rn	Rn-4 -> Rn, FPUL -> (Rn)	0100nnnn01010010		
frchg	If FPSCR.PR = 0: ~FPSCR.FR -> FPSCR.FR Else: Undefined Operation	1111101111111101		
fschg	If FPSCR.PR = 0: ~FPSCR.SZ -> FPSCR.SZ Else: Undefined Operation	1111001111111101		
fpchg	~FPSCR.PR -> FPSCR.PR	1111011111111101		
