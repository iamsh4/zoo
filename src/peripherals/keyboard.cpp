#include <algorithm>
#include <cstring>

#include "peripherals/keyboard.h"

namespace maple {

/* Default identification data for a Dreamcast keyboard */
u8 keyboard_identification[] = {
  0x00, 0x00, 0x00, 0x40, 0x01, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0x00, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x20,
  0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64,
  0x20, 0x42, 0x79, 0x20, 0x6f, 0x72, 0x20, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x4c,
  0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x46, 0x72, 0x6f, 0x6d, 0x20, 0x53, 0x45,
  0x47, 0x41, 0x20, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x53,
  0x2c, 0x4c, 0x54, 0x44, 0x2e, 0x20, 0x20, 0x20, 0x20, 0x20, 0xae, 0x01, 0xf4, 0x01
};

Keyboard::Keyboard()
{
  reset();
}

Keyboard::~Keyboard()
{
  return;
}

ssize_t
Keyboard::identify(const Header *const in, Header *const out, u8 *const buffer)
{
  out->source |= 0x20u;
  out->length = sizeof(keyboard_identification) / 4u;

  memcpy(buffer, keyboard_identification, sizeof(keyboard_identification));
  return sizeof(keyboard_identification);
}

ssize_t
Keyboard::run_command(const Packet *const in, Packet *const out)
{
  if (in->function != 0x40000000u) {
    return -1;
  }

  /* Prepare common fields. */
  out->header.source |= 0x20;

  switch (in->header.command) {
    case RequestCondition: {
      printf("****** Keyboard request condition!\n");
      return -1;
    }

    default:
      return -1;
  }
}

void
Keyboard::reset()
{
  return;
}

}
